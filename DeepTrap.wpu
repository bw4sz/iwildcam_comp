#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.breakpoints = {loc('DeepTrap/BackgroundSubtraction.py'): {230L: (0,
        None,
        1,
        0)}}
debug.err-values = {None: {},
                    loc('../DeepMeerkat/training/Classification/pipeline.py'): {},
                    loc('DeepTrap/BackgroundSubtraction.py'): {},
                    loc('DeepTrap/Detector.py'): {},
                    loc('DeepTrap/Locations.py'): {},
                    loc('train.py'): {}}
debug.exceptions-ignored = {loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/keras/utils/data_utils.py'): {401: True}}
debug.recent-run-args = {loc('../DeepMeerkat/DeepMeerkat/Meerkat.py'): [u'--training',
        u'--training_mode',
        u'--input "asdasd.avi"',
        u'--threaded',
        u'--threaded --i /Users/ben/Dropbox/HummingbirdProject/Completed_Frames/Sachatamia/foundframes/201710',
        u' --i /Users/ben/Dropbox/HummingbirdProject/Completed_Frames/Sachatamia/foundframes/201710',
        u'--threaded /--i Users/ben/Dropbox/HummingbirdProject/Completed_Frames/Sachatamia/foundframes/201710',
        u'--threaded /--i Users/ben/Dropbox/HummingbirdProject/Data/Sachatamia/foundframes/201710'],
                         loc('../DeepMeerkat/DeepMeerkat/main.py'): [u'--threaded'],
                         loc('../DeepMeerkat/training/Classification/Training.sh'): [u'--train_input_path Samples/Training/trainingdata.csv \n--eval_input_path Samples/Testing/testingdata.csv\n--input_dict Samples/dict.txt\n--output_dir Output'],
                         loc('../DeepMeerkat/training/Classification/pipeline.py'): [u'    --train_input_path Samples/Training/trainingdata.csv \n    --eval_input_path Samples/Testing/testingdata.csv\n    --input_dict Samples/dict.txt\n    --output_dir Output/'],
                         loc('../DeepMeerkat/training/Classification/trainer/preprocess.py'): [u'--input_path /Users/ben/Documents/DeepMeerkat/training/Classification/Samples/Training/trainingdata.csv --input_dict /Users/ben/Documents/DeepMeerkat/training/Classification/Samples/dict.txt --output_path Output',
        u'--input_path Samples/Training/trainingdata.csv --input_dict /Users/ben/Documents/DeepMeerkat/training/Classification/Samples/dict.txt --output_path Output',
        u'--input_path /Users/ben/Documents/DeepMeerkat/training/Classification/Samples/Training/trainingdata.csv --input_dict /Users/ben/Documents/DeepMeerkat/training/Classification/Samples/dict.txt --output_path /Users/ben/Documents/DeepMeerkat/training/Classification/Output',
        u'--input_path Samples/Training/trainingdata.csv --input_dict Samples/dict.txt --output_path Output',
        u'--input_path Samples/Training/trainingdata.csv --input_dict Samples/dict.txt',
        u'--input_path Samples/Training/trainingdata.csv\n\n--input_dict Samples/dict.txt',
        u'--input_path Samples/Training/trainingdata.csv\n--input_dict Samples/dict.txt',
        u'--input_path Samples/Training/trainingdata.csv ',
        u'Samples/Training/trainingdata.csv '],
                         loc('train.py'): [u'--debug']}
edit.bookmarks = {u'Locations.py:48': (loc('DeepTrap/Locations.py'),
                                       {'attrib-starts': [],
        'first-line': 34L,
        'sel-line': 47L})}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'XJhyfDuUfSFS1sBEXYhXqlW2zq'\
        'uzgXJC',
        'size-state': 'fullscreen',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.2714386959603118,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [(3,)],
                                 'selected-nodes': [(3,
        5)],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [1,
                          0],
        'notebook_display': 'normal',
        'notebook_percent': 0.5,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': u'scheduler',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': u'plot',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('testing',
                      'wide',
                      0,
                      {'added-files': [],
                       'filter': u'',
                       'recent-filters': None,
                       'sort-order': 'alpha',
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [(0,)],
                                      'top-node': (0,)}}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 8648L,
                       'folded-linenos': [],
                       'history': {None: [],
                                   u'file:/Users/ben/Documents/iwildcam_comp/DeepTrap/Detector.py': ['i'\
        'mport os\n',
        'os.getcwd()\n',
        'data.keys\n',
        'data\n',
        '    data = read_json()\n',
        'data.keys()\n',
        'data["annotatiosn"]\n',
        'data["annotations"]\n',
        'data["annotations"].keys\n',
        'data["annotations"].keys()\n',
        'data["annotations"].key\n',
        'data["annotations"][0]\n',
        'data["annotations"][1]\n',
        'import pandas as pd\n',
        'pd.DataFrame(data["annotations"])\n',
        'df.bbox.iloc(0)\n',
        'df.bbox.iloc[1]\n',
        'df.bbox.iloc[0]\n',
        'df.bbox\n',
        'df = pd.DataFrame(data["annotations"])\n',
        'df.shape\n',
        'df.columns\n',
        'df.id\\\n',
        'df.id\n',
        'df.\n',
        'df.image',
        'df.image_id        df = df.reset_index("image_id")\n',
        'df = df.reset_index("image_id")\n',
        'df = df.set_index("image_id")\n',
        'df\n',
        'df.image_id\n',
        'df.index\n',
        'df.index.size()\n',
        'df.index.size\n',
        "image_dir = \"tests/data/iWildCam_2019_CCT/iWildCam_2019_CCT_images"\
        "/\"\n#grab available files\ntrain_df = pd.read_csv('../data/train.c"\
        "sv')\ntrain_df['file_path'] = train_df['id'].apply(lambda x: os.pat"\
        "h.join(image_dir, f'{x}.jpg'))            \ntrain_df = utils.check_"\
        "images(train_df, image_dir)\n\nfor index,row in train_df.iterrows()"\
        ":\n    plot_detection(row.file_path, detections)\n\n",
        'image_dir = "tests/data/iWildCam_2019_CCT/iWildCam_2019_CCT_images/'\
        '"\n',
        "image_dir = \"../tests/data/iWildCam_2019_CCT/iWildCam_2019_CCT_ima"\
        "ges/\"\n#grab available files\ntrain_df = pd.read_csv('../data/trai"\
        "n.csv')\ntrain_df['file_path'] = train_df['id'].apply(lambda x: os."\
        "path.join(image_dir, f'{x}.jpg'))            \ntrain_df = utils.che"\
        "ck_images(train_df, image_dir)\n\n",
        'for index,row in train_df.iterrows():\n    plot_detection(row.file_'\
        'path, detections)\n\n'],
                                   u'file:/Users/ben/Documents/iwildcam_comp/DeepTrap/Locations.py': ['i'\
        'Bottom\n',
        'imageHeight\n',
        'imageWidth\n',
        'box\n',
        'leftRel\n',
        'image_detection[0]\n',
        'topRel\n',
        'bottomRel\n',
        'h = (bottomRel-topRel)\n',
        'h\n',
        'w\n',
        'iLeft\n',
        'x\n',
        'y\n',
        "rect = patches.Rectangle((x,y),w,h,linewidth=linewidth,edgecolor='r"\
        "',\n                         facecolor='none')\n# Add the patch to "\
        "the Axes\nax.add_patch(rect)\n\n",
        "rect = patches.Rectangle((y,x),w,h,linewidth=linewidth,edgecolor='r"\
        "',\n                         facecolor='none')\n\n",
        'ax.add_patch(rect)\n',
        'plt.show()\n',
        "def render_bounding_boxes(boxes, scores, inputFileNames,\n         "\
        "                 confidenceThreshold=DEFAULT_CONFIDENCE_THRESHOLD,l"\
        "inewidth=5):\n    \"\"\"\n    Render bounding boxes on the image fi"\
        "les specified in [inputFileNames].  \n\n    [boxes] and [scores] sh"\
        "ould be in the format returned by generate_detections, \n    specif"\
        "ically [top, left, bottom, right] in normalized units, where the\n"\
        "    origin is the upper-left.    \n    \"\"\"\n\n    nImages = len("\
        "inputFileNames)\n    iImage = 0\n\n    for iImage in range(0,nImage"\
        "s):\n\n        inputFileName = inputFileNames[iImage]\n        imag"\
        "e = mpimg.imread(inputFileName)\n        iBox = 0; box = boxes[iIma"\
        "ge][iBox]\n        dpi = 100\n        s = image.shape; imageHeight "\
        "= s[0]; imageWidth = s[1]\n        figsize = imageWidth / float(dpi"\
        "), imageHeight / float(dpi)\n\n        plt.figure(figsize=figsize)"\
        "\n        ax = plt.axes([0,0,1,1])\n\n        # Display the image\n"\
        "        ax.imshow(image)\n        ax.set_axis_off()\n\n        for "\
        "iBox,box in enumerate(boxes[iImage]):\n\n            score = scores"\
        "[iImage][iBox]\n            if score < confidenceThreshold:\n      "\
        "          continue\n\n            # top, left, bottom, right \n    "\
        "        #\n            # x,y origin is the upper-left\n            "\
        "topRel = box[0]\n            leftRel = box[1]\n            bottomRe"\
        "l = box[2]\n            rightRel = box[3]\n\n            x = leftRe"\
        "l\n            y = topRel\n            w = (rightRel-leftRel) \n   "\
        "         h = (bottomRel-topRel)\n\n            # Location is the bo"\
        "ttom-left of the rect\n            #\n            # Origin is the u"\
        "pper-left\n            iLeft = x\n            iBottom = y\n        "\
        "    rect = patches.Rectangle((x,y),w,h,linewidth=linewidth,edgecolo"\
        "r='r',\n                                     facecolor='none')\n\n"\
        "            # Add the patch to the Axes\n            ax.add_patch(r"\
        "ect)        \n\n        # This is magic goop that removes whitespac"\
        "e around image plots (sort of)        \n        plt.subplots_adjust"\
        "(top = 1, bottom = 0, right = 1, left = 0, hspace = 0, \n          "\
        "                  wspace = 0)\n        plt.margins(0,0)\n        ax"\
        ".xaxis.set_major_locator(ticker.NullLocator())\n        ax.yaxis.se"\
        "t_major_locator(ticker.NullLocator())\n        ax.axis('tight')\n  "\
        "      ax.set(xlim=[0,imageWidth],ylim=[imageHeight,0],aspect=1)\n  "\
        "      plt.axis('off')   \n        plt.show()\n\n\n",
        'render_bounding_box(box=image_detection, score=image_scores, inputF'\
        'ileName=file_name)\n',
        'image_detection\n',
        'target_images = bgmodel.run()\n',
        'target_images\n',
        'cv2.imwrite("/Users/Ben/Desktop/test.png",image)\n',
        'cv2.normalize\n',
        'cv2.normalize(image)\n',
        'image_norm= cv2.normalize(image)\n',
        'image_norm= cv2.normalize(image, None)\n',
        'image_norm.mean\n',
        'image_norm.mean()\n',
        'image_norm.sum()\n',
        'image.sum()\n',
        'image_norm = np.array([])\ncv2.normalize(image, image_norm)\n\n',
        'image_norm = cv2.normalize(image)\n',
        'image_norm = cv2.normalize(image, None)\n',
        'image_norm\n',
        'import sklearn\n',
        'img_YCrCb[0,:,:]\n',
        'img_YCrCb.shape\n',
        'img_YCrCb[:,:,0]\n',
        'img_YCrCb[:,:,0].mean()\n',
        'img_YCrCb = cv2.cvtColor(img_wb,cv2.COLOR_BGR2YCrCb)\n',
        'cv2.imwrite("/Users/Ben/Desktop/test.jpg",img_YCrCb )\n',
        'img_YCrCb\n',
        'cv2.imwrite("/Users/Ben/Desktop/test.jpg",img_YCrCb[:,:,0] )\n',
        'cv2.imwrite("/Users/Ben/Desktop/test.jpg",img_YCrCb[:,:,0] )',
        'mean_scaled=img_YCrCb[:,:,0]  / img_YCrCb[:,:,0] .mean()\n',
        'mean_scaled < 0\n',
        'np.sum(mean_scaled > 0)\n',
        'mean_scaled = img_YCrCb[:,:,0]  - img_YCrCb[:,:,0] .mean()\n',
        'np.sum(mean_scaled < 0)\n',
        'mean_scaled *= (mean_scaled>0)\n',
        'cv2.imwrite("/Users/Ben/Desktop/test.jpg",mean_scaled )\n',
        'cv2.imwrite("/Users/Ben/Desktop/test.jpg",img)\n',
        'image\n',
        'background\n',
        'sequence_background\n',
        'sequence_background = self.create_background(image_data[image_data.'\
        'file_path !=image_path], target_shape=image.shape)\n',
        'sequence_background.shape\n',
        'images = []\nfor index, row in image_data.iterrows():\n    img = se'\
        'lf.load_image(row.file_path)\n    images.append(img)\n\n',
        'images[0]\n',
        'images = self.resize_sequence(images, target_shape)\n',
        'images[0].shape\n',
        'images = np.dstack(images)\n',
        'median_background = np.median(images, axis=1)\n',
        'median_background = np.median(images, axis=2)\n',
        'median_background = np.median(images)\n',
        'images\n',
        'images = np.asarray(images)\n',
        'images = []\nfor index, row in image_data.iterrows():\n    img = se'\
        'lf.load_image(row.file_path)\n    images.append(img)\n\n#Check imag'\
        'e shapes, optionally resize\nimages = self.resize_sequence(images, '\
        'target_shape)        \n\n#Stack images into a single array\nimages '\
        '= np.stack(images)\n\n',
        'images.shape\n',
        'median_background = np.median(images, axis=3)\n',
        'median_background = np.median(images, axis=0)\n',
        'median_background.shape\n',
        'cv2.imwrite("/Users/Ben/Desktop/test.jpg",median_background )\n',
        'cv2.imwrite("/Users/Ben/Desktop/test.jpg",median_background[:,:,0] '\
        ')\n',
        'median_background\n',
        'background.image\n',
        'background.shape\n',
        'mean_scaled = image[:,:,0]  - image[:,:,0].mean()\n',
        'cv2.imwrite("/Users/Ben/Desktop/test.jpg",mean_scaled[:,:,0])\n',
        'mean_scaled\n',
        'mean_scaled.shape\n',
        'mean_scaled[:,:,0] = image[:,:,0]  - image[:,:,0].mean()\n',
        'image[:,:,0]  - image[:,:,0].mean()\n',
        'threshold_image.shape\n',
        'cv2.imwrite("/Users/Ben/Desktop/test.jpg",threshold_image[:,:,0])\n',
        'threshold_image.min(axis=0)\n',
        'threshold_image.min(axis=2)\n',
        'threshold_image.min(axis=3)\n',
        'threshold_image.min(axis=(0,1))\n',
        'threshold_image.max(axis=(0,1))\n',
        'threshold_image.mean(axis=(0,1))\n',
        'image.shape\n',
        'image[:,:,2] = image[:,:,2] / image[:,:,2].max() * 255\n',
        'image.min(axis=(0,1))\n',
        'image.max(axis=(0,1))\n',
        'image.meanm(axis=(0,1))\n',
        'image.mean(axis=(0,1))\n',
        'cv2.imwrite("/Users/Ben/Desktop/test.jpg",image[:,:,0])\n'],
                                   u'file:/Users/ben/Documents/iwildcam_comp/tests/download_sample_location.py': ["t"\
        "rain_df = pd.read_csv('../data/train.csv')\n",
        'train_df.groupby("location").size.sort_values()\n',
        'train_df.groupby("location").size().sort_values()\n'],
                                   u'file:/Users/ben/Documents/iwildcam_comp/train.py': ['t'\
        'rain_df.index()\n',
        'train_df = train_df.groupby("category_id", as_index=False).apply(la'\
        'mbda x: x.head(n=2000)).reset_index()\n',
        'train_df.coluimns\n',
        'train_df = train_df.groupby("category_id").apply(lambda x: x.head(n'\
        '=2000))\n',
        'train_df.shpe\n',
        'train_df.coluns\n',
        'train_df.columns\n',
        'train_df.index\n',
        'unique_locations = train_df.locations.drop_duplicates()\n',
        'unique_locations = train_df.location.drop_duplicates()\n',
        'unique_locations = train_df.location.drop_duplicates().head(n=1)\n',
        'unique_locations = train_df.location.drop_duplicates().head(n=3)\n',
        'unique_locations = train_df.location.drop_duplicates().head(n=10)\n',
        'unique_locations = train_df.location.drop_duplicates().sample(n=10)'\
        '\ntrain_df[train_df.location.isin(unique_locations)]\n\n',
        'unique_locations\n',
        'unique_locations = train_df.location.drop_duplicates().sample(n=10)'\
        '\n',
        'train_df[train_df.location.isin(unique_locations)]\n',
        'train_df.locations.size()\n',
        'train_df.location.size()\n',
        'train_df.groupby("location").size().sort_values().head(n=20)\n',
        'train_df.groupby("location").size().sort_values().head(n=30)\n',
        'train_df.groupby("location").size().sort_values().head(n=100)\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().head(n=100)\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().head(n=50)\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().head(n=20)\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().head(n=30)\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().iloc[0:25]\n',
        'train_df.locations.unique()\n',
        'train_df.location.unique()\n',
        'unique_locations.columns\n',
        'unique_locations.index()\n',
        'unique_locations.index\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().head(n=25).index()\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().head(n=25)\n',
        'selected_locations.index()\n',
        'selected_locations.index\n',
        'list(selected_locations.index)\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().head(n=25)\nselected_locations =list(selected_locations.index)'\
        '\n\n',
        'train_df = utils.read_train_data(image_dir=config["train_data_path"'\
        '], supp_data=False)\n\n#Ensure images exist\n#train_df = utils.chec'\
        'k_images(train_df, config["train_data_path"])\n\n#Mini test set for'\
        ' quick training test\nselected_locations = train_df.groupby("locati'\
        'on").size().sort_values().head(n=50)\nselected_locations =list(sele'\
        'cted_locations.index)\ntrain_df = train_df[train_df.location.isin(s'\
        'elected_locations)]\n\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().iloc[:60]\nselected_locations =list(selected_locations.index)\n'\
        'train_df = train_df[train_df.location.isin(selected_locations)]\n\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().iloc[:70]\nselected_locations =list(selected_locations.index)\n'\
        'train_df = train_df[train_df.location.isin(selected_locations)]\n\n',
        'train_df.shape\n',
        'len(selected_locations)\n',
        'train_df\n',
        '#load annotations\ntrain_df = utils.read_train_data(image_dir=confi'\
        'g["train_data_path"], supp_data=False)\n\n#Ensure images exist\n#tr'\
        'ain_df = utils.check_images(train_df, config["train_data_path"])\n'\
        '\n#Mini test set for quick training test\nselected_locations = trai'\
        'n_df.groupby("location").size().sort_values().iloc[:70]\nselected_l'\
        'ocations =list(selected_locations.index)\ntrain_df = train_df[train'\
        '_df.location.isin(selected_locations)]\n\n',
        'train_df[train_df.location.isin(selected_locations)]\n',
        'train_df[train_df.location.isin(selected_locations)].shape\n',
        'train_df.groupby("location").size()[:70]\n',
        'train_df.groupby("location").size()[:70].sum\n',
        'train_df.groupby("location").size()[:70].sum()\n',
        'train_df.groupby("location").size()\n',
        'train_df[train_df.location==0].shape\n',
        ' train_df.groupby("location").size().sort_values()\n',
        'train_df[train_df.location==119].shape\n',
        'train_df.groupby("location").size().sort_values()\n',
        'train_df.groupby("location").size().sort_values().loc[:70]\n',
        'train_df.groupby("location").size().sort_values().iloc[:70]\n',
        'train_df.groupby("location").size().sort_values().iloc[:70].sum()\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().iloc[:70]\n',
        'selected_locations =list(selected_locations.index)\n',
        'selected_locations\n',
        'train_df = train_df[train_df.location.isin(selected_locations)]\n',
        'train_df = utils.read_train_data(image_dir=config["train_data_path"'\
        '], supp_data=False)\n',
        'training_split, evaluation_split = utils.split_training(train_df, i'\
        'mage_dir=config["train_data_path"] )\n',
        'classes\n',
        'train_df.groupby("category_id")\n',
        'train_df.groupby("category_id").size()\n',
        'train_df.groupby("category_id").size().index\n',
        'train_df.groupby("category_id").size().index.values\n',
        '[utils.classes[x] for x intrain_df.groupby("category_id").size().in'\
        'dex.values]\n',
        '[utils.classes[x] for x in train_df.groupby("category_id").size().i'\
        'ndex.values]\n',
        'training_split\n',
        'evaluation_split\n',
        "evaluation_split.groupby('category_id')\n",
        "evaluation_split.groupby('category_id').size()\n",
        '#load annotations\ntrain_df = utils.read_train_data(image_dir=confi'\
        'g["train_data_path"], supp_data=False)\n\n#Ensure images exist\n#tr'\
        'ain_df = utils.check_images(train_df, config["train_data_path"])\n'\
        '\n#Create keras training generator - split the training data into a'\
        ' validation set, both from the California site.\ntraining_split, ev'\
        'aluation_split = utils.split_training(train_df, image_dir=config["t'\
        'rain_data_path"] )\n\n',
        'training_split.groupby("location").size()\n',
        'training_split.groupby("location").size().sort_values().cumsum()\n',
        'training_split.groupby("location").size().sort_values().cumsum() > '\
        '10000\n',
        'training_split.groupby("location").size().sort_values().cumsum() < '\
        '10000\n',
        'location_filter = training_split.groupby("location").size().sort_va'\
        'lues().cumsum() < 10000\n',
        'location_filter[location_filter==True]\n',
        'location_filter[location_filter==True].index.values\n',
        'selected_locations = location_filter[location_filter==True].index.v'\
        'alues\n',
        'training_split.shape\n',
        'evaluation_split.shape\n',
        'training_split.groupby("categoryid")\n',
        'training_split.groupby("category_id").size().nuinque()\n',
        'training_split.groupby("category_id").size().shape\n',
        'evaluation_split.groupby("category_id").size().shape\n',
        'evaluation_split.groupby("category_id").size()\n',
        'training_split.groupby("category_id")\n',
        'training_split.groupby("category_id").size()\n',
        'training_split.groupby("category_id").size().sort_values\n',
        'training_split.groupby("category_id").size().sort_values/training_s'\
        'plit.shape[0]\n',
        'training_split.groupby("category_id").size().sort_values/training_s'\
        'plit.shape\n',
        'training_split.groupby("category_id").size().sort_values()/training'\
        '_split.shape\n',
        'training_split.groupby("category_id").size().sort_values()/training'\
        '_split.shape[0].to_dict()\n',
        'training_split.groupby("category_id").size().sort_values()/training'\
        '_split.shape[0]\n',
        'utils.classes\n']},
                       'launch-id': None,
                       'sel-line': 8664L,
                       'sel-line-start': 2683115L,
                       'selection_end': 2683115L,
                       'selection_start': 2683115L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 0L,
                       'folded-linenos': [],
                       'history': {},
                       'launch-id': None,
                       'sel-line': 5L,
                       'sel-line-start': 359L,
                       'selection_end': 359L,
                       'selection_start': 359L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('DeepTrap/BackgroundSubtraction.py'),
        {'attrib-starts': [('BackgroundModel',
                            34),
                           ('BackgroundModel.run',
                            277)],
         'first-line': 284L,
         'folded-linenos': [],
         'sel-line': 297L,
         'sel-line-start': 10687L,
         'selection_end': 10708L,
         'selection_start': 10704L,
         'zoom': 0L},
        1556648925.288163],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.plot_sequence',
                             316)],
          'first-line': 303L,
          'folded-linenos': [],
          'sel-line': 316L,
          'sel-line-start': 11487L,
          'selection_end': 11499L,
          'selection_start': 11495L,
          'zoom': 0L},
         1556648925.992464],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.plot_sequence',
                             316)],
          'first-line': 309L,
          'folded-linenos': [],
          'sel-line': 322L,
          'sel-line-start': 11652L,
          'selection_end': 11674L,
          'selection_start': 11670L,
          'zoom': 0L},
         1556648927.393547],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.plot_sequence',
                             316)],
          'first-line': 315L,
          'folded-linenos': [],
          'sel-line': 324L,
          'sel-line-start': 11720L,
          'selection_end': 11743L,
          'selection_start': 11739L,
          'zoom': 0L},
         1556648928.896874],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 4L,
          'sel-line-start': 89L,
          'selection_end': 101L,
          'selection_start': 97L,
          'zoom': 0L},
         1556648929.779789],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 4L,
          'sel-line-start': 89L,
          'selection_end': 118L,
          'selection_start': 114L,
          'zoom': 0L},
         1556648930.665198],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.run_sequence',
                             201)],
          'first-line': 212L,
          'folded-linenos': [],
          'sel-line': 227L,
          'sel-line-start': 8095L,
          'selection_end': 8140L,
          'selection_start': 8140L,
          'zoom': 0L},
         1556648942.376966],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.run_single',
                             237)],
          'first-line': 259L,
          'folded-linenos': [],
          'sel-line': 274L,
          'sel-line-start': 10043L,
          'selection_end': 10084L,
          'selection_start': 10084L,
          'zoom': 0L},
         1556648945.992841],
        [loc('DeepTrap/Locations.py'),
         {'attrib-starts': [],
          'first-line': 37L,
          'folded-linenos': [],
          'sel-line': 50L,
          'sel-line-start': 1455L,
          'selection_end': 1463L,
          'selection_start': 1463L,
          'zoom': 0L},
         1556648999.4702],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.post_process',
                             117)],
          'first-line': 112L,
          'folded-linenos': [],
          'sel-line': 117L,
          'sel-line-start': 3844L,
          'selection_end': 3856L,
          'selection_start': 3852L,
          'zoom': 0L},
         1556649005.451046],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.apply',
                             182)],
          'first-line': 176L,
          'folded-linenos': [],
          'sel-line': 189L,
          'sel-line-start': 6677L,
          'selection_end': 6703L,
          'selection_start': 6699L,
          'zoom': 0L},
         1556649006.461383],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.post_process',
                             117)],
          'first-line': 118L,
          'folded-linenos': [],
          'sel-line': 132L,
          'sel-line-start': 4359L,
          'selection_end': 4372L,
          'selection_start': 4372L,
          'zoom': 0L},
         1556649015.418833],
        [loc('DeepTrap/Locations.py'),
         {'attrib-starts': [],
          'first-line': 37L,
          'folded-linenos': [],
          'sel-line': 50L,
          'sel-line-start': 1455L,
          'selection_end': 1463L,
          'selection_start': 1463L,
          'zoom': 0L},
         1556649101.184922],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.post_process',
                             117)],
          'first-line': 118L,
          'folded-linenos': [],
          'sel-line': 132L,
          'sel-line-start': 4359L,
          'selection_end': 4399L,
          'selection_start': 4399L,
          'zoom': 0L},
         1556649154.602581],
        [loc('DeepTrap/Locations.py'),
         {'attrib-starts': [],
          'first-line': 37L,
          'folded-linenos': [],
          'sel-line': 50L,
          'sel-line-start': 1455L,
          'selection_end': 1463L,
          'selection_start': 1463L,
          'zoom': 0L},
         1556649161.322962],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.post_process',
                             117)],
          'first-line': 127L,
          'folded-linenos': [],
          'sel-line': 132L,
          'sel-line-start': 4359L,
          'selection_end': 4399L,
          'selection_start': 4397L,
          'zoom': 0L},
         1556649357.281286],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.post_process',
                             117)],
          'first-line': 127L,
          'folded-linenos': [],
          'sel-line': 132L,
          'sel-line-start': 4359L,
          'selection_end': 4398L,
          'selection_start': 4398L,
          'zoom': 0L},
         1556649374.896539],
        [loc('DeepTrap/Locations.py'),
         {'attrib-starts': [],
          'first-line': 37L,
          'folded-linenos': [],
          'sel-line': 51L,
          'sel-line-start': 1464L,
          'selection_end': 1472L,
          'selection_start': 1472L,
          'zoom': 0L},
         1556649699.102147],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.run_sequence',
                             203)],
          'first-line': 218L,
          'folded-linenos': [],
          'sel-line': 227L,
          'sel-line-start': 8052L,
          'selection_end': 8069L,
          'selection_start': 8065L,
          'zoom': 0L},
         1556649702.898824],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.run_sequence',
                             203)],
          'first-line': 218L,
          'folded-linenos': [],
          'sel-line': 229L,
          'sel-line-start': 8145L,
          'selection_end': 8183L,
          'selection_start': 8183L,
          'zoom': 0L},
         1556649711.154557]],
        20),
        'current-loc': loc('DeepTrap/Locations.py'),
        'editor-state-list': [(loc('DeepTrap/utils.py'),
                               {'attrib-starts': [('check_images',
        12)],
                                'first-line': 11L,
                                'folded-linenos': [],
                                'sel-line': 16L,
                                'sel-line-start': 628L,
                                'selection_end': 628L,
                                'selection_start': 628L,
                                'zoom': 0L}),
                              (loc('train.py'),
                               {'attrib-starts': [],
                                'first-line': 29L,
                                'folded-linenos': [],
                                'sel-line': 33L,
                                'sel-line-start': 1055L,
                                'selection_end': 1142L,
                                'selection_start': 1088L,
                                'zoom': 0L}),
                              (loc('DeepTrap/models/resnet.py'),
                               {'attrib-starts': [('Model',
        12)],
                                'first-line': 15L,
                                'folded-linenos': [],
                                'sel-line': 13L,
                                'sel-line-start': 343L,
                                'selection_end': 347L,
                                'selection_start': 347L,
                                'zoom': 0L}),
                              (loc('DeepTrap/Locations.py'),
                               {'attrib-starts': [],
                                'first-line': 37L,
                                'folded-linenos': [],
                                'sel-line': 51L,
                                'sel-line-start': 1464L,
                                'selection_end': 1472L,
                                'selection_start': 1472L,
                                'zoom': 0L}),
                              (loc('DeepTrap/BackgroundSubtraction.py'),
                               {'attrib-starts': [('BackgroundModel',
        34),
        ('BackgroundModel.run_sequence',
         203)],
                                'first-line': 218L,
                                'folded-linenos': [],
                                'sel-line': 229L,
                                'sel-line-start': 8145L,
                                'selection_end': 8183L,
                                'selection_start': 8183L,
                                'zoom': 0L}),
                              (loc('DeepTrap/Detector.py'),
                               {'attrib-starts': [],
                                'first-line': 2L,
                                'folded-linenos': [],
                                'sel-line': 10L,
                                'sel-line-start': 220L,
                                'selection_end': 230L,
                                'selection_start': 230L,
                                'zoom': 0L}),
                              (loc('config.yaml'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 4L,
                                'sel-line-start': 283L,
                                'selection_end': 283L,
                                'selection_start': 283L,
                                'zoom': 0L}),
                              (loc('DeepTrap/preprocess.py'),
                               {'attrib-starts': [('resize_image',
        4)],
                                'first-line': 1L,
                                'folded-linenos': [],
                                'sel-line': 16L,
                                'sel-line-start': 515L,
                                'selection_end': 554L,
                                'selection_start': 515L,
                                'zoom': 0L})],
        'has-focus': True,
        'locked': False},
        [loc('DeepTrap/utils.py'),
         loc('train.py'),
         loc('DeepTrap/models/resnet.py'),
         loc('DeepTrap/Locations.py'),
         loc('DeepTrap/BackgroundSubtraction.py'),
         loc('DeepTrap/Detector.py'),
         loc('config.yaml'),
         loc('DeepTrap/preprocess.py')]),
                               'open_files': [u'DeepTrap/Detector.py',
        u'DeepTrap/models/resnet.py',
        u'DeepTrap/preprocess.py',
        u'DeepTrap/utils.py',
        u'config.yaml',
        u'train.py',
        u'DeepTrap/BackgroundSubtraction.py',
        u'DeepTrap/Locations.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.29774730656219395},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         0,
                         1440,
                         900)}]}
guimgr.recent-documents = [loc('DeepTrap/Locations.py'),
                           loc('DeepTrap/BackgroundSubtraction.py'),
                           loc('train.py'),
                           loc('DeepTrap/Detector.py'),
                           loc('DeepTrap/utils.py'),
                           loc('config.yaml'),
                           loc('DeepTrap/preprocess.py'),
                           loc('DeepTrap/models/resnet.py')]
guimgr.visual-state = {loc('../../../../Library/Python/2.7/site-packages/joblib/_parallel_backends.py'): {'a'\
        'ttrib-starts': [('SafeFunction',
                          337),
                         ('SafeFunction.__call__',
                          347)],
        'first-line': 343L,
        'folded-linenos': [],
        'sel-line': 358L,
        'sel-line-start': 14184L,
        'selection_end': 14184L,
        'selection_start': 14184L,
        'zoom': 0L},
                       loc('../../../../System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/multiprocessing/pool.py'): {'a'\
        'ttrib-starts': [('mapstar',
                          63)],
        'first-line': 103L,
        'folded-linenos': [],
        'sel-line': 64L,
        'sel-line-start': 1995L,
        'selection_end': 1995L,
        'selection_start': 1995L,
        'zoom': 0L},
                       loc('../../../../System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py'): {'a'\
        'ttrib-starts': [('Thread',
                          639),
                         ('Thread.run',
                          751)],
        'first-line': 736L,
        'folded-linenos': [],
        'sel-line': 762L,
        'sel-line-start': 27090L,
        'selection_end': 27090L,
        'selection_start': 27090L,
        'zoom': 0L},
                       loc('../DeepForest/.travis.yml'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 11L,
        'sel-line-start': 248L,
        'selection_end': 270L,
        'selection_start': 270L,
        'zoom': 0L},
                       loc('../DeepForest/DeepForest/SubmitEvaluation.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 142L,
        'selection_end': 161L,
        'selection_start': 161L,
        'zoom': 0L},
                       loc('../DeepForest/DeepForest/fpclib/fpclib/crownSegmenter.py'): {'a'\
        'ttrib-starts': [('smoothenGridDSM',
                          20),
                         ('smoothenGridDSM.averageNeighbors',
                          23)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 521L,
        'selection_end': 532L,
        'selection_start': 532L,
        'zoom': 0L},
                       loc('../DeepForest/DeepForest/fpclib/fpclib/forest.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 226L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepForest/DeepForest/fpclib/fpclib/geometry.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 229L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepForest/DeepForest/fpclib/fpclib/util.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepForest/HPC/StartDask.py'): {'attrib-start'\
        's': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 511L,
        'selection_end': 511L,
        'selection_start': 511L,
        'zoom': 0L},
                       loc('../DeepMeerkat/DeepMeerkat/Meerkat.py'): {'attri'\
        'b-starts': [],
        'first-line': 79L,
        'folded-linenos': [],
        'sel-line': 91L,
        'sel-line-start': 2929L,
        'selection_end': 2992L,
        'selection_start': 2988L,
        'zoom': 0L},
                       loc('../DeepMeerkat/DeepMeerkat/Video.py'): {'attrib-'\
        'starts': [('Video',
                    13),
                   ('Video.cluster_bounding_boxes',
                    252)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 259L,
        'sel-line-start': 9596L,
        'selection_end': 9655L,
        'selection_start': 9651L,
        'zoom': 0L},
                       loc('../DeepMeerkat/StartCloudDataFlow.sh'): {'attrib'\
        '-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 10L,
        'sel-line-start': 226L,
        'selection_end': 253L,
        'selection_start': 253L,
        'zoom': 0L},
                       loc('../DeepMeerkat/run_clouddataflow.py'): {'attrib-'\
        'starts': [('PredictDoFn',
                    9),
                   ('PredictDoFn.process',
                    14)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 542L,
        'selection_end': 563L,
        'selection_start': 563L,
        'zoom': 0L},
                       loc('../DeepMeerkat/training/Classification/Training.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 16L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 835L,
        'selection_end': 847L,
        'selection_start': 847L,
        'zoom': 0L},
                       loc('../DeepMeerkat/training/Classification/sample_photos.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 5L,
        'folded-linenos': [],
        'sel-line': 23L,
        'sel-line-start': 664L,
        'selection_end': 737L,
        'selection_start': 737L,
        'zoom': 0L},
                       loc('../DeepMeerkat/training/Classification/trainer/model.py'): {'a'\
        'ttrib-starts': [('Model',
                          100),
                         ('Model.build_inception_graph',
                          142)],
        'first-line': 136L,
        'folded-linenos': [],
        'sel-line': 149L,
        'sel-line-start': 5316L,
        'selection_end': 5348L,
        'selection_start': 5348L,
        'zoom': 0L},
                       loc('../ExploringDeepMeerkat/Appendix1.md'): {'attrib'\
        '-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../WhalePhys/Cloud/Startup.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 9L,
        'sel-line-start': 249L,
        'selection_end': 249L,
        'selection_start': 249L,
        'zoom': 0L},
                       loc('../dask-jobqueue/dask_jobqueue/core.py'): {'attr'\
        'ib-starts': [('JobQueueCluster',
                       16),
                      ('JobQueueCluster.adapt',
                       130)],
        'first-line': 120L,
        'folded-linenos': [],
        'sel-line': 131L,
        'sel-line-start': 3878L,
        'selection_end': 3883L,
        'selection_start': 3883L,
        'zoom': 0L},
                       loc('../dask-jobqueue/dask_jobqueue/slurm.py'): {'att'\
        'rib-starts': [('SLURMCluster',
                        15),
                       ('SLURMCluster.__init__',
                        32)],
        'first-line': 13L,
        'folded-linenos': [],
        'sel-line': 53L,
        'sel-line-start': 1406L,
        'selection_end': 1434L,
        'selection_start': 1434L,
        'zoom': 0L},
                       loc('../dask-jobqueue/dask_jobqueue/test_slurm.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../dask-jobqueue/test_slurm.py'): {'attrib-start'\
        's': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 187L,
        'selection_end': 187L,
        'selection_start': 187L,
        'zoom': 0L},
                       loc('DeepTrap/BackgroundSubtraction.py'): {'attrib-st'\
        'arts': [('BackgroundModel',
                  35),
                 ('BackgroundModel.run_sequence',
                  148)],
        'first-line': 169L,
        'folded-linenos': [],
        'sel-line': 173L,
        'sel-line-start': 6150L,
        'selection_end': 6186L,
        'selection_start': 6186L,
        'zoom': 0L},
                       loc('DeepTrap/Generator.py'): {'attrib-starts': [('Ge'\
        'nerator',
        13),
        ('Generator.plot_image',
         137)],
        'first-line': 130L,
        'folded-linenos': [],
        'sel-line': 140L,
        'sel-line-start': 4261L,
        'selection_end': 4299L,
        'selection_start': 4299L,
        'zoom': 0L},
                       loc('DeepTrap/Geometry.py'): {'attrib-starts': [],
        'first-line': 117L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepTrap/Locations.py'): {'attrib-starts': [],
        'first-line': 27L,
        'folded-linenos': [],
        'sel-line': 42L,
        'sel-line-start': 1129L,
        'selection_end': 1151L,
        'selection_start': 1151L,
        'zoom': 0L},
                       loc('DeepTrap/__init__.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepTrap/callback.py'): {'attrib-starts': [('Eva'\
        'luate',
        6),
        ('Evaluate.on_epoch_end',
         18)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 38L,
        'sel-line-start': 1354L,
        'selection_end': 1362L,
        'selection_start': 1362L,
        'zoom': 0L},
                       loc('DeepTrap/models/mobilenet.py'): {'attrib-starts': [('M'\
        'odel',
        13),
        ('Model.train',
         18)],
        'first-line': 2L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 671L,
        'selection_end': 708L,
        'selection_start': 693L,
        'zoom': 0L},
                       loc('DeepTrap/models/resnet.py'): {'attrib-starts': [('M'\
        'odel',
        11),
        ('Model.load_model',
         33)],
        'first-line': 37L,
        'folded-linenos': [],
        'sel-line': 38L,
        'sel-line-start': 1250L,
        'selection_end': 1258L,
        'selection_start': 1258L,
        'zoom': 0L},
                       loc('DeepTrap/preprocess.py'): {'attrib-starts': [],
        'first-line': 1L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 49L,
        'selection_end': 49L,
        'selection_start': 49L,
        'zoom': 0L},
                       loc('DeepTrap/utils.py'): {'attrib-starts': [('split_'\
        'training',
        65)],
        'first-line': 59L,
        'folded-linenos': [],
        'sel-line': 68L,
        'sel-line-start': 2431L,
        'selection_end': 2455L,
        'selection_start': 2455L,
        'zoom': 0L},
                       loc('DeepTrap/visualization.py'): {'attrib-starts': [('p'\
        'lot_confusion_matrix',
        74)],
        'first-line': 101L,
        'folded-linenos': [],
        'sel-line': 115L,
        'sel-line-start': 3767L,
        'selection_end': 3826L,
        'selection_start': 3826L,
        'zoom': 0L},
                       loc('HPC/submit_training.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 2L,
        'sel-line-start': 89L,
        'selection_end': 99L,
        'selection_start': 99L,
        'zoom': 0L},
                       loc('config.yaml'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 10L,
        'sel-line-start': 325L,
        'selection_end': 342L,
        'selection_start': 342L,
        'zoom': 0L},
                       loc('download_sample_data.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 37L,
        'sel-line-start': 1190L,
        'selection_end': 1232L,
        'selection_start': 1232L,
        'zoom': 0L},
                       loc('tests/download_sample_location.py'): {'attrib-st'\
        'arts': [],
        'first-line': 2L,
        'folded-linenos': [],
        'sel-line': 11L,
        'sel-line-start': 224L,
        'selection_end': 270L,
        'selection_start': 270L,
        'zoom': 0L},
                       loc('train.py'): {'attrib-starts': [],
        'first-line': 40L,
        'folded-linenos': [],
        'sel-line': 54L,
        'sel-line-start': 2215L,
        'selection_end': 2215L,
        'selection_start': 2215L,
        'zoom': 0L},
                       loc('untitled-6.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../macrosystems/DeepForest/DeepForest/SubmitKeras.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 336L,
        'selection_end': 362L,
        'selection_start': 362L,
        'zoom': 0L},
                       loc('../macrosystems/DeepForest/DeepForest/SubmitRVis.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../macrosystems/DeepForest/RunJob.sh'): {'attrib'\
        '-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 18L,
        'sel-line-start': 330L,
        'selection_end': 330L,
        'selection_start': 330L,
        'zoom': 0L},
                       loc('../macrosystems/DeepForest/SubmitLidar.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 2L,
        'sel-line-start': 42L,
        'selection_end': 65L,
        'selection_start': 65L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/keras/utils/data_utils.py'): {'a'\
        'ttrib-starts': [('get_index',
                          386)],
        'first-line': 388L,
        'folded-linenos': [],
        'sel-line': 400L,
        'sel-line-start': 13745L,
        'selection_end': 13745L,
        'selection_start': 13745L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/core/computation/expressions.py'): {'a'\
        'ttrib-starts': [('set_numexpr_threads',
                          53)],
        'first-line': 52L,
        'folded-linenos': [],
        'sel-line': 56L,
        'sel-line-start': 1213L,
        'selection_end': 1256L,
        'selection_start': 1256L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          97),
                         ('NDFrame.sample',
                          4704)],
        'first-line': 4457L,
        'folded-linenos': [],
        'sel-line': 4838L,
        'sel-line-start': 171912L,
        'selection_end': 171912L,
        'selection_start': 171912L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/core/internals/construction.py'): {'a'\
        'ttrib-starts': [('sanitize_index',
                          508)],
        'first-line': 506L,
        'folded-linenos': [],
        'sel-line': 515L,
        'sel-line-start': 17727L,
        'selection_end': 17746L,
        'selection_start': 17746L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepTrap/lib/python3.7/threading.py'): {'a'\
        'ttrib-starts': [('Thread',
                          738),
                         ('Thread._bootstrap',
                          870)],
        'first-line': 879L,
        'folded-linenos': [],
        'sel-line': 886L,
        'sel-line-start': 31295L,
        'selection_end': 31342L,
        'selection_start': 31342L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('custom',
                        [u'PYTHONPATH=""'])}
proj.pyexec = {None: ('custom',
                      u'/Users/ben/miniconda3/envs/DeepTrap/bin/python')}
proj.vcs-system-config = ('prefs',
                          {'bzr': {'versioncontrol.bzr.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.bzr.executable': u'bzr'},
                           'cvs': {'versioncontrol.cvs.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.cvs.executable': u'cvs',
                                   'versioncontrol.cvs.extra-global-args': '-'\
        'z3'},
                           'git': {'versioncontrol.git.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.git.executable': u'git',
                                   'versioncontrol.git.use-porcelain': True},
                           'hg': {'versioncontrol.hg.active': 'active-if-pro'\
        'ject-dir',
                                  'versioncontrol.hg.dont-find-unregistered': True,
                                  'versioncontrol.hg.executable': u'hg',
                                  'versioncontrol.hg.extra-global-args': '--'\
        'encoding=utf8'},
                           'perforce': {'versioncontrol.perforce.active': 'n'\
        'ot-active',
        'versioncontrol.perforce.dont-find-unregistered': True,
        'versioncontrol.perforce.executable': u'p4',
        'versioncontrol.perforce.extra-global-args': ''},
                           'svn': {'versioncontrol.svn.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.svn.executable': u'svn',
                                   'versioncontrol.svn.extra-global-args': '',
                                   'versioncontrol.svn.svnadmin-executable': u'svnadmin'}})
search.search-history = [u'plot',
                         u'21',
                         u'post',
                         u'post_pre',
                         u'create_background',
                         u'ceate_background',
                         u'subtra',
                         u'create_b',
                         u'creat',
                         u'create_back',
                         u'preprocess',
                         u'load_image',
                         u'apply',
                         u'prepro',
                         u'plot_',
                         u'kernel',
                         u'draw_box',
                         u'draw_',
                         u'draw',
                         u'200']
testing.stored-results = (1,
                          [],
                          {})
