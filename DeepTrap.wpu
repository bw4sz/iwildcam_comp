#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.breakpoints = {loc('DeepTrap/BackgroundSubtraction.py'): {251L: (0,
        None,
        1,
        0),
        277L: (0,
               None,
               1,
               0)},
                     loc('DeepTrap/Detector.py'): {126L: (0,
        None,
        1,
        0)}}
debug.err-values = {None: {},
                    loc('../DeepMeerkat/training/Classification/pipeline.py'): {},
                    loc('DeepTrap/BackgroundSubtraction.py'): {},
                    loc('DeepTrap/Detector.py'): {},
                    loc('DeepTrap/Locations.py'): {},
                    loc('train.py'): {}}
debug.exceptions-ignored = {loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/keras/utils/data_utils.py'): {401: True}}
debug.recent-run-args = {loc('../DeepMeerkat/DeepMeerkat/Meerkat.py'): [u'--training',
        u'--training_mode',
        u'--input "asdasd.avi"',
        u'--threaded',
        u'--threaded --i /Users/ben/Dropbox/HummingbirdProject/Completed_Frames/Sachatamia/foundframes/201710',
        u' --i /Users/ben/Dropbox/HummingbirdProject/Completed_Frames/Sachatamia/foundframes/201710',
        u'--threaded /--i Users/ben/Dropbox/HummingbirdProject/Completed_Frames/Sachatamia/foundframes/201710',
        u'--threaded /--i Users/ben/Dropbox/HummingbirdProject/Data/Sachatamia/foundframes/201710'],
                         loc('../DeepMeerkat/DeepMeerkat/main.py'): [u'--threaded'],
                         loc('../DeepMeerkat/training/Classification/Training.sh'): [u'--train_input_path Samples/Training/trainingdata.csv \n--eval_input_path Samples/Testing/testingdata.csv\n--input_dict Samples/dict.txt\n--output_dir Output'],
                         loc('../DeepMeerkat/training/Classification/pipeline.py'): [u'    --train_input_path Samples/Training/trainingdata.csv \n    --eval_input_path Samples/Testing/testingdata.csv\n    --input_dict Samples/dict.txt\n    --output_dir Output/'],
                         loc('../DeepMeerkat/training/Classification/trainer/preprocess.py'): [u'--input_path /Users/ben/Documents/DeepMeerkat/training/Classification/Samples/Training/trainingdata.csv --input_dict /Users/ben/Documents/DeepMeerkat/training/Classification/Samples/dict.txt --output_path Output',
        u'--input_path Samples/Training/trainingdata.csv --input_dict /Users/ben/Documents/DeepMeerkat/training/Classification/Samples/dict.txt --output_path Output',
        u'--input_path /Users/ben/Documents/DeepMeerkat/training/Classification/Samples/Training/trainingdata.csv --input_dict /Users/ben/Documents/DeepMeerkat/training/Classification/Samples/dict.txt --output_path /Users/ben/Documents/DeepMeerkat/training/Classification/Output',
        u'--input_path Samples/Training/trainingdata.csv --input_dict Samples/dict.txt --output_path Output',
        u'--input_path Samples/Training/trainingdata.csv --input_dict Samples/dict.txt',
        u'--input_path Samples/Training/trainingdata.csv\n\n--input_dict Samples/dict.txt',
        u'--input_path Samples/Training/trainingdata.csv\n--input_dict Samples/dict.txt',
        u'--input_path Samples/Training/trainingdata.csv ',
        u'Samples/Training/trainingdata.csv '],
                         loc('train.py'): [u'--debug']}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'XJhyfDuUfSFS1sBEXYhXqlW2zq'\
        'uzgXJC',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.2714386959603118,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [(3,)],
                                 'selected-nodes': [(3,
        8)],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [1,
                          0],
        'notebook_display': 'normal',
        'notebook_percent': 0.5,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': u'scheduler',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'',
                                       'fReverse': False,
                                       'fSearchText': u'resize',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('testing',
                      'wide',
                      0,
                      {'added-files': [],
                       'filter': u'',
                       'recent-filters': None,
                       'sort-order': 'alpha',
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [(0,)],
                                      'top-node': (0,)}}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 6385L,
                       'folded-linenos': [],
                       'history': {None: [],
                                   u'file:/Users/ben/Documents/iwildcam_comp/DeepTrap/Detector.py': ['i'\
        'mport os\n',
        'os.getcwd()\n',
        'data.keys\n',
        'data\n',
        '    data = read_json()\n',
        'data.keys()\n',
        'data["annotatiosn"]\n',
        'data["annotations"]\n',
        'data["annotations"].keys\n',
        'data["annotations"].keys()\n',
        'data["annotations"].key\n',
        'data["annotations"][0]\n',
        'data["annotations"][1]\n',
        'import pandas as pd\n',
        'pd.DataFrame(data["annotations"])\n',
        'df.bbox.iloc(0)\n',
        'df.bbox.iloc[1]\n',
        'df.bbox.iloc[0]\n',
        'df.bbox\n',
        'df = pd.DataFrame(data["annotations"])\n',
        'df.shape\n',
        'df.columns\n',
        'df.id\\\n',
        'df.id\n',
        'df.\n',
        'df.image',
        'df.image_id        df = df.reset_index("image_id")\n',
        'df = df.reset_index("image_id")\n',
        'df = df.set_index("image_id")\n',
        'df\n',
        'df.image_id\n',
        'df.index\n',
        'df.index.size()\n',
        'df.index.size\n'],
                                   u'file:/Users/ben/Documents/iwildcam_comp/DeepTrap/Locations.py': ['i'\
        'mg\n',
        'cv2.imshow("window",foreground)\ncv2.waitKey(0)\n\n',
        'img = cv2.imread(row.file_path)\ncv2.imshow("window",img)\ncv2.wait'\
        'Key(0)\n\n',
        'import matplotlib.pyplot as plt\n',
        'fig = plt.figure()\nplt.subplot(221)\nplt.imshow(img)\nplt.subplot('\
        '222)\nplt.imshow(foreground)\n\n',
        '(image_data.file_path\n',
        'mage_data.file_path.loc[0]\n',
        'image_data.file_path.loc[0]\n',
        'image_data.file_path.loc\n',
        'image_data.file_path.loc(0)\n',
        'image_data.file_path\n',
        'image_data.file_path[0]\n',
        'image_data.file_path[1]\n',
        'image_data.file_path[2]\n',
        'image_data.file_path.iloc\n',
        'image_data.file_path.iloc(1)\n',
        'image_data.file_path.iloc(0)\n',
        'image_data.file_path.iloc[0]\n',
        'row\n',
        'row.seq\n',
        'image_data[image_data.seq_id == row.seq_id]\n',
        'len(image_data[image_data.seq_id == row.seq_id])\n',
        'id\n',
        'index\n',
        'image_data.size()\n',
        'image_data.size\n',
        'image_data.shape\n',
        'image_data.shape[0]\n',
        'background\n',
        'bounding_box\n',
        'out = cv2.findContours(image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_S'\
        'IMPLE )\n',
        'len(out)\n',
        'out\n',
        'contours,hierarchy = cv2.findContours(image, cv2.RETR_EXTERNAL, cv2'\
        '.CHAIN_APPROX_SIMPLE )\n',
        'contours = [contour for contour in contours if cv2.contourArea(cont'\
        'our) > 50]\n',
        'contours\n',
        'type(boxes)\n',
        'BoundingBox\n',
        'len(boxes)\n',
        'len(boxes[0])\n',
        'boxes[0]\n',
        'type(boxes[0])\n',
        'boxes = self.find_bounding_box(threshold_image)\n',
        'boxes\n',
        'threshold_image = self.draw_box(threshold_image, boxes)\n',
        'threshold_image\n',
        'threshold_image.mean()\n',
        'threshold_image.max()\n',
        'threshold_image.shape\n',
        'sequence_background\n',
        'type(sequence_background)\n',
        'type(image)\n',
        'image.type()\n',
        'image\n',
        'background.type\n',
        'background.type()\n',
        'type(background)\n',
        'background.dtype()\n',
        'background.dtype\n',
        'image.dtype\n',
        'image_data.columns\n',
        'for fname in image_data.file_path: print(fname)\n',
        'for fname in image_data.file_name: print(fname)\n',
        'image_data.iloc\n',
        'image_data.iloc(index)\n',
        'image_data.iloc(index)                    fname = image_data.iloc[i'\
        'ndex].file_name\n',
        'fname = image_data.iloc[index].file_name\n',
        'fname\n',
        'self.box\n',
        'data\n',
        'data.columns\n',
        'data.groupby(["category_id","day_night"]).size()\n',
        'from DeepTrap import utils\n',
        'import utils\n',
        'utils.classes\n',
        'clasess[13]\n',
        'classes[13]\n',
        'utils.classes[13]\n',
        'image_data\n',
        'self.data\n',
        'images\n',
        'len(images)\n',
        'images.shape\n',
        'images.[0]\xe2\x89\xa5shape\n',
        'images.[0].shape\n',
        'images[0]\n',
        'images[0].shape\n',
        'images[1].shape\n',
        'images[2].shape\n',
        '[x.shape for x in images]\n',
        'images[5].shape\n',
        'images[5]\n',
        'plt.imshow(images[5])\n',
        'plt.plot()\n',
        'plt.show()\n',
        'cv2.imwrite("/Users/Ben/Desktop/bad.jpg")\n',
        'cv2.imwrite("/Users/Ben/Desktop/bad.jpg",iamges[5])\n',
        'cv2.imwrite("/Users/Ben/Desktop/bad.jpg",images[6])\n',
        'cv2.imwrite("/Users/Ben/Desktop/good.jpg",images[6])\n',
        'cv2.imwrite("/Users/Ben/Desktop/bad.jpg",images[5])\n'],
                                   u'file:/Users/ben/Documents/iwildcam_comp/tests/download_sample_location.py': ["t"\
        "rain_df = pd.read_csv('../data/train.csv')\n",
        'train_df.groupby("location").size.sort_values()\n',
        'train_df.groupby("location").size().sort_values()\n'],
                                   u'file:/Users/ben/Documents/iwildcam_comp/train.py': ['t'\
        'rain_df.index()\n',
        'train_df = train_df.groupby("category_id", as_index=False).apply(la'\
        'mbda x: x.head(n=2000)).reset_index()\n',
        'train_df.coluimns\n',
        'train_df = train_df.groupby("category_id").apply(lambda x: x.head(n'\
        '=2000))\n',
        'train_df.shpe\n',
        'train_df.coluns\n',
        'train_df.columns\n',
        'train_df.index\n',
        'unique_locations = train_df.locations.drop_duplicates()\n',
        'unique_locations = train_df.location.drop_duplicates()\n',
        'unique_locations = train_df.location.drop_duplicates().head(n=1)\n',
        'unique_locations = train_df.location.drop_duplicates().head(n=3)\n',
        'unique_locations = train_df.location.drop_duplicates().head(n=10)\n',
        'unique_locations = train_df.location.drop_duplicates().sample(n=10)'\
        '\ntrain_df[train_df.location.isin(unique_locations)]\n\n',
        'unique_locations\n',
        'unique_locations = train_df.location.drop_duplicates().sample(n=10)'\
        '\n',
        'train_df[train_df.location.isin(unique_locations)]\n',
        'train_df.locations.size()\n',
        'train_df.location.size()\n',
        'train_df.groupby("location").size().sort_values().head(n=20)\n',
        'train_df.groupby("location").size().sort_values().head(n=30)\n',
        'train_df.groupby("location").size().sort_values().head(n=100)\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().head(n=100)\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().head(n=50)\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().head(n=20)\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().head(n=30)\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().iloc[0:25]\n',
        'train_df.locations.unique()\n',
        'train_df.location.unique()\n',
        'unique_locations.columns\n',
        'unique_locations.index()\n',
        'unique_locations.index\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().head(n=25).index()\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().head(n=25)\n',
        'selected_locations.index()\n',
        'selected_locations.index\n',
        'list(selected_locations.index)\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().head(n=25)\nselected_locations =list(selected_locations.index)'\
        '\n\n',
        'train_df = utils.read_train_data(image_dir=config["train_data_path"'\
        '], supp_data=False)\n\n#Ensure images exist\n#train_df = utils.chec'\
        'k_images(train_df, config["train_data_path"])\n\n#Mini test set for'\
        ' quick training test\nselected_locations = train_df.groupby("locati'\
        'on").size().sort_values().head(n=50)\nselected_locations =list(sele'\
        'cted_locations.index)\ntrain_df = train_df[train_df.location.isin(s'\
        'elected_locations)]\n\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().iloc[:60]\nselected_locations =list(selected_locations.index)\n'\
        'train_df = train_df[train_df.location.isin(selected_locations)]\n\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().iloc[:70]\nselected_locations =list(selected_locations.index)\n'\
        'train_df = train_df[train_df.location.isin(selected_locations)]\n\n',
        'train_df.shape\n',
        'len(selected_locations)\n',
        'train_df\n',
        '#load annotations\ntrain_df = utils.read_train_data(image_dir=confi'\
        'g["train_data_path"], supp_data=False)\n\n#Ensure images exist\n#tr'\
        'ain_df = utils.check_images(train_df, config["train_data_path"])\n'\
        '\n#Mini test set for quick training test\nselected_locations = trai'\
        'n_df.groupby("location").size().sort_values().iloc[:70]\nselected_l'\
        'ocations =list(selected_locations.index)\ntrain_df = train_df[train'\
        '_df.location.isin(selected_locations)]\n\n',
        'train_df[train_df.location.isin(selected_locations)]\n',
        'train_df[train_df.location.isin(selected_locations)].shape\n',
        'train_df.groupby("location").size()[:70]\n',
        'train_df.groupby("location").size()[:70].sum\n',
        'train_df.groupby("location").size()[:70].sum()\n',
        'train_df.groupby("location").size()\n',
        'train_df[train_df.location==0].shape\n',
        ' train_df.groupby("location").size().sort_values()\n',
        'train_df[train_df.location==119].shape\n',
        'train_df.groupby("location").size().sort_values()\n',
        'train_df.groupby("location").size().sort_values().loc[:70]\n',
        'train_df.groupby("location").size().sort_values().iloc[:70]\n',
        'train_df.groupby("location").size().sort_values().iloc[:70].sum()\n',
        'selected_locations = train_df.groupby("location").size().sort_value'\
        's().iloc[:70]\n',
        'selected_locations =list(selected_locations.index)\n',
        'selected_locations\n',
        'train_df = train_df[train_df.location.isin(selected_locations)]\n',
        'train_df = utils.read_train_data(image_dir=config["train_data_path"'\
        '], supp_data=False)\n',
        'training_split, evaluation_split = utils.split_training(train_df, i'\
        'mage_dir=config["train_data_path"] )\n',
        'classes\n',
        'train_df.groupby("category_id")\n',
        'train_df.groupby("category_id").size()\n',
        'train_df.groupby("category_id").size().index\n',
        'train_df.groupby("category_id").size().index.values\n',
        '[utils.classes[x] for x intrain_df.groupby("category_id").size().in'\
        'dex.values]\n',
        '[utils.classes[x] for x in train_df.groupby("category_id").size().i'\
        'ndex.values]\n',
        'training_split\n',
        'evaluation_split\n',
        "evaluation_split.groupby('category_id')\n",
        "evaluation_split.groupby('category_id').size()\n",
        '#load annotations\ntrain_df = utils.read_train_data(image_dir=confi'\
        'g["train_data_path"], supp_data=False)\n\n#Ensure images exist\n#tr'\
        'ain_df = utils.check_images(train_df, config["train_data_path"])\n'\
        '\n#Create keras training generator - split the training data into a'\
        ' validation set, both from the California site.\ntraining_split, ev'\
        'aluation_split = utils.split_training(train_df, image_dir=config["t'\
        'rain_data_path"] )\n\n',
        'training_split.groupby("location").size()\n',
        'training_split.groupby("location").size().sort_values().cumsum()\n',
        'training_split.groupby("location").size().sort_values().cumsum() > '\
        '10000\n',
        'training_split.groupby("location").size().sort_values().cumsum() < '\
        '10000\n',
        'location_filter = training_split.groupby("location").size().sort_va'\
        'lues().cumsum() < 10000\n',
        'location_filter[location_filter==True]\n',
        'location_filter[location_filter==True].index.values\n',
        'selected_locations = location_filter[location_filter==True].index.v'\
        'alues\n',
        'training_split.shape\n',
        'evaluation_split.shape\n',
        'training_split.groupby("categoryid")\n',
        'training_split.groupby("category_id").size().nuinque()\n',
        'training_split.groupby("category_id").size().shape\n',
        'evaluation_split.groupby("category_id").size().shape\n',
        'evaluation_split.groupby("category_id").size()\n',
        'training_split.groupby("category_id")\n',
        'training_split.groupby("category_id").size()\n',
        'training_split.groupby("category_id").size().sort_values\n',
        'training_split.groupby("category_id").size().sort_values/training_s'\
        'plit.shape[0]\n',
        'training_split.groupby("category_id").size().sort_values/training_s'\
        'plit.shape\n',
        'training_split.groupby("category_id").size().sort_values()/training'\
        '_split.shape\n',
        'training_split.groupby("category_id").size().sort_values()/training'\
        '_split.shape[0].to_dict()\n',
        'training_split.groupby("category_id").size().sort_values()/training'\
        '_split.shape[0]\n',
        'utils.classes\n']},
                       'launch-id': None,
                       'sel-line': 6387L,
                       'sel-line-start': 2475311L,
                       'selection_end': 2475660L,
                       'selection_start': 2475311L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 70L,
                       'folded-linenos': [],
                       'history': {None: ['train_df.groupby("category_id").a'\
        'pply(lambda x: x.head(n=100)).shape\n',
        'import argparse\nimport numpy as np\nfrom datetime import datetime'\
        '\n\nfrom DeepTrap import utils\nfrom DeepTrap.models import resnet'\
        '\nfrom DeepTrap import evaluation, visualization, callback\nfrom De'\
        'epTrap.Generator import Generator\n\n',
        'training_split, evaluation_split = utils.split_training(train_df, i'\
        'mage_dir=config["train_data_path"] )\n',
        'train_generator = Generator(training_split, config=config, image_di'\
        'r=config["train_data_path"])\n',
        'evaluation_generator = Generator(evaluation_split, config=config, i'\
        'mage_dir=config["train_data_path"])\n',
        'train_generator.shape\n',
        'train_generator.data\n',
        'from DeepTrap import utils\nfrom DeepTrap.models import resnet\nfro'\
        'm DeepTrap import evaluation, visualization, callback\nfrom DeepTra'\
        'p.Generator import Generator\n\n',
        'config = utils.read_config()\n',
        'train_df = utils.read_train_data(image_dir=config["train_data_path"'\
        '], supp_data=False)\n',
        'traindf = train_df.groupby("category_id").apply(lambda x: x.head(n='\
        '100))\n',
        'test_df = utils.read_test_data(image_dir=config["test_data_path"])'\
        '\n',
        'training_split, evaluation_split = utils.split_training(train_df, i'\
        'mage_dir=config["train_data_path"] )\ntrain_generator = Generator(t'\
        'raining_split, config=config, image_dir=config["train_data_path"])'\
        '\nevaluation_generator = Generator(evaluation_split, config=config,'\
        ' image_dir=config["train_data_path"])\n\n',
        'train_generator.size()\n',
        'len(train_generator)\n',
        '190542/50\n',
        'traindf.shape\n',
        'generator.size()/generator.batch_size\n',
        '143/32\n',
        'int(143/32)\n',
        "train_df = pd.read_csv('/data/train.csv')\ntrain_df['file_path'] = "\
        "train_df['id'].apply(lambda x: os.path.join(config[\"train_data_pat"\
        "h\"], f'{x}.jpg'))\ntrain_df = utils.check_images(train_df, config["\
        "\"train_data_path\"])\n\n",
        'import pandas as pd\n',
        'import os\n',
        "train_df = pd.read_csv('../data/train.csv')\ntrain_df['file_path'] "\
        "= train_df['id'].apply(lambda x: os.path.join(config[\"train_data_p"\
        "ath\"], f'{x}.jpg'))\ntrain_df = utils.check_images(train_df, confi"\
        "g[\"train_data_path\"])\n\n",
        "train_df = pd.read_csv('data/train.csv')\ntrain_df['file_path'] = t"\
        "rain_df['id'].apply(lambda x: os.path.join(config[\"train_data_path"\
        "\"], f'{x}.jpg'))\ntrain_df = utils.check_images(train_df, config["\
        "\"train_data_path\"])\n\n",
        "train_df = pd.read_csv('data/train.csv')\n",
        'train_df.category_id\n',
        'train_df.group_by("seq_id").agg("sum")\n',
        'train_df.groupby("seq_id").nunique("category_id")\n',
        'train_df.groupby("seq_id").nunique("category_id")["category_id"]\n',
        'train_df.groupby("seq_id").agg({"count": lambda x x:x.nunique()}\n'\
        '\n',
        'train_df.groupby("seq_id").agg({"count": lambda x x:x.nunique()})\n',
        'train_df.groupby("seq_id").agg({"count": lambda x :x.nunique()})\n',
        'train_df.groupby("seq_id").agg({"count": lambda x: x.nunique()})\n',
        'train_df.groupby("seq_id").agg({"category_id": lambda x: x.nunique('\
        ')})\n',
        'a.head()\n',
        'a.category_id\n',
        'a.category_id.mean()\n',
        'len(a)\n',
        '686/147623\n',
        'b=a[a.category_id > 1].seq_in\n',
        'a[a.category_id > 1]\n',
        'a[a.category_id > 1].columns\n',
        'a[a.category_id > 1].index\n',
        'a[a.category_id > 1].index()\n',
        'b=a[a.category_id > 1].index\n',
        'train_df[train_df.seq_id.isin(b)]\n',
        'a=train_df.groupby("seq_id").agg({"category_id": lambda x: x.nuniqu'\
        'e()}).filter',
        'a=train_df.groupby("seq_id").agg({"category_id": lambda x: x.nuniqu'\
        'e()}).filter("category_id" > 1)\n',
        'a=train_df.groupby("seq_id").agg({"category_id": lambda x: x.nuniqu'\
        'e()})\n',
        'a=train_df["category_id"!=0].groupby("seq_id").agg({"category_id": '\
        'lambda x: x.nunique()})\n',
        'a=train_df[train_df["category_id"!=0]].groupby("seq_id").agg({"cate'\
        'gory_id": lambda x: x.nunique()})\n',
        'train_df[train_df["category_id"!=0]]\n',
        'train_df[train_df[~"category_id"=0]]\n',
        'train_df[train_df["category_id"=0]]\n',
        'train_df["category_id"==0]\n',
        'train_df[train_df.category_id==0]\n',
        'train_df[~train_df.category_id==0]\n',
        'train_df[!train_df.category_id=0]\n',
        'train_df[!train_df.category_id!=0]\n',
        'train_df[train_df.category_id!=0]\n',
        'train_df[train_df.category_id!=0].groupby("seq_id").agg({"category_'\
        'id": lambda x: x.nunique()})\n',
        'b=train_df[train_df.category_id!=0].groupby("seq_id").agg({"categor'\
        'y_id": lambda x: x.nunique()})\n',
        'b[b.category_id>1]\n',
        'b[b.category_id>1].count()\n',
        '40/train_df.shape[0]\n',
        'a=mean([7,8])\n',
        'import numpy as np\n',
        'np.mean([7,8])\n',
        'a=np.mean([7,8])\n',
        'np.mean([a,9])\n',
        'np.mean([7,8,8])\n',
        'np.mean([7,8,9])\n',
        'np.median([7,8,8])\n',
        'train_df.seq_id\n',
        'train_df.groupby("seq_id").nunique()\n',
        'train_df.groupby("seq_id").size()\n',
        'a=train_df.groupby("seq_id").size()\n',
        'a.seq_id\n',
        'a[0]\n',
        'sum(a)\n',
        'a.hist()\n',
        'a.table\n',
        'a.table()\n',
        'pd.crosstab(a)\n',
        'pd.crosstab(a,)\n',
        'a.columns\n',
        'a\n',
        'pd.crosstab(a,"count")\n',
        'wb = cv2.xphoto.createSimpleWB()\n',
        'import cv2\n',
        'cv2.xphoto\n',
        'from DeepTrap import utils\n',
        'utils.classes\n',
        'import keras_resnet\n',
        'keras_resnet.models\n',
        'import keras_resnet.models\n',
        'keras_resnet.models.ResNet50\n',
        'help(keras_resnet.models.ResNet50)\n',
        "#set matplotlib\nimport matplotlib\nmatplotlib.use('Agg')\n\nimport"\
        " argparse\nimport numpy as np\nfrom datetime import datetime\n\nfro"\
        "m DeepTrap import utils\nfrom DeepTrap.models import resnet\nfrom D"\
        "eepTrap import evaluation, visualization, callback\nfrom DeepTrap.G"\
        "enerator import Generator\n\n#Set training or training\nmode_parser"\
        " = argparse.ArgumentParser(description='DeepTrap Training')\nmode_p"\
        "arser.add_argument('--debug', action=\"store_true\")\nmode_parser.a"\
        "dd_argument(\"-g\", \"--gpus\", type=int, default=1, help=\"# of GP"\
        "Us to use for training\")\nmode =mode_parser.parse_args()\n\n#Outpu"\
        "t dir\ndirname = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n\n#Rea"\
        "d and log config file\nconfig = utils.read_config()\nexperiment.log"\
        "_parameters(config)\nexperiment.log_parameters(prefix= \"classifica"\
        "tion_model\", dic=config[\"classification_model\"])\nexperiment.log"\
        "_parameters(prefix= \"bgmodel\", dic=config[\"bgmodel\"])\n\n"]},
                       'launch-id': None,
                       'sel-line': 82L,
                       'sel-line-start': 3165L,
                       'selection_end': 3165L,
                       'selection_start': 3165L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/numpy/lib/shape_base.py'),
        {'attrib-starts': [('dstack',
                            647)],
         'first-line': 675L,
         'folded-linenos': [],
         'sel-line': 698L,
         'sel-line-start': 21489L,
         'selection_end': 21489L,
         'selection_start': 21489L,
         'zoom': 0L},
        1556555034.764918],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.get_parent_bounding_box',
                             89)],
          'first-line': 72L,
          'folded-linenos': [],
          'sel-line': 91L,
          'sel-line-start': 2880L,
          'selection_end': 2914L,
          'selection_start': 2914L,
          'zoom': 0L},
         1556555228.279132],
        [loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/numpy/lib/shape_base.py'),
         {'attrib-starts': [('dstack',
                             647)],
          'first-line': 685L,
          'folded-linenos': [],
          'sel-line': 698L,
          'sel-line-start': 21489L,
          'selection_end': 21489L,
          'selection_start': 21489L,
          'zoom': 0L},
         1556555230.250351],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.resize',
                             69)],
          'first-line': 61L,
          'folded-linenos': [],
          'sel-line': 69L,
          'sel-line-start': 2066L,
          'selection_end': 2081L,
          'selection_start': 2081L,
          'zoom': 0L},
         1556555327.113166],
        [loc('DeepTrap/preprocess.py'),
         {'attrib-starts': [('resize_image',
                             4)],
          'first-line': 1L,
          'folded-linenos': [],
          'sel-line': 16L,
          'sel-line-start': 515L,
          'selection_end': 554L,
          'selection_start': 515L,
          'zoom': 0L},
         1556555334.729952],
        [loc('config.yaml'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 3L,
          'sel-line-start': 211L,
          'selection_end': 226L,
          'selection_start': 226L,
          'zoom': 0L},
         1556555336.331602],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.run_sequence',
                             166)],
          'first-line': 166L,
          'folded-linenos': [],
          'sel-line': 177L,
          'sel-line-start': 6567L,
          'selection_end': 6613L,
          'selection_start': 6603L,
          'zoom': 0L},
         1556555665.637135],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.run_sequence',
                             166)],
          'first-line': 166L,
          'folded-linenos': [],
          'sel-line': 173L,
          'sel-line-start': 6361L,
          'selection_end': 6390L,
          'selection_start': 6380L,
          'zoom': 0L},
         1556555668.061328],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.run_sequence',
                             166)],
          'first-line': 166L,
          'folded-linenos': [],
          'sel-line': 176L,
          'sel-line-start': 6463L,
          'selection_end': 6519L,
          'selection_start': 6502L,
          'zoom': 0L},
         1556555672.026056],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.run_single',
                             202)],
          'first-line': 189L,
          'folded-linenos': [],
          'sel-line': 210L,
          'sel-line-start': 7900L,
          'selection_end': 7956L,
          'selection_start': 7939L,
          'zoom': 0L},
         1556555675.518518],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.run_sequence',
                             169)],
          'first-line': 158L,
          'folded-linenos': [],
          'sel-line': 179L,
          'sel-line-start': 6355L,
          'selection_end': 6400L,
          'selection_start': 6394L,
          'zoom': 0L},
         1556555796.707365],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.run_single',
                             205)],
          'first-line': 202L,
          'folded-linenos': [],
          'sel-line': 215L,
          'sel-line-start': 7813L,
          'selection_end': 7825L,
          'selection_start': 7825L,
          'zoom': 0L},
         1556555835.053065],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.run',
                             248)],
          'first-line': 246L,
          'folded-linenos': [],
          'sel-line': 265L,
          'sel-line-start': 9732L,
          'selection_end': 9780L,
          'selection_start': 9780L,
          'zoom': 0L},
         1556556087.994563],
        [loc('DeepTrap/Locations.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 5L,
          'sel-line-start': 92L,
          'selection_end': 92L,
          'selection_start': 92L,
          'zoom': 0L},
         1556556094.758534],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.run',
                             250)],
          'first-line': 232L,
          'folded-linenos': [],
          'sel-line': 253L,
          'sel-line-start': 9374L,
          'selection_end': 9404L,
          'selection_start': 9398L,
          'zoom': 0L},
         1556556150.917123],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.create_background',
                             79)],
          'first-line': 87L,
          'folded-linenos': [],
          'sel-line': 92L,
          'sel-line-start': 2902L,
          'selection_end': 2924L,
          'selection_start': 2919L,
          'zoom': 0L},
         1556556151.493034],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.create_background',
                             79)],
          'first-line': 87L,
          'folded-linenos': [],
          'sel-line': 92L,
          'sel-line-start': 2902L,
          'selection_end': 2926L,
          'selection_start': 2919L,
          'zoom': 0L},
         1556556152.939999],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.create_background',
                             79)],
          'first-line': 87L,
          'folded-linenos': [],
          'sel-line': 92L,
          'sel-line-start': 2902L,
          'selection_end': 2928L,
          'selection_start': 2919L,
          'zoom': 0L},
         1556556155.305848],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.create_background',
                             79)],
          'first-line': 87L,
          'folded-linenos': [],
          'sel-line': 92L,
          'sel-line-start': 2902L,
          'selection_end': 2933L,
          'selection_start': 2931L,
          'zoom': 0L},
         1556556158.935134],
        [loc('DeepTrap/BackgroundSubtraction.py'),
         {'attrib-starts': [('BackgroundModel',
                             34),
                            ('BackgroundModel.resize_sequence',
                             69)],
          'first-line': 64L,
          'folded-linenos': [],
          'sel-line': 69L,
          'sel-line-start': 2066L,
          'selection_end': 2080L,
          'selection_start': 2074L,
          'zoom': 0L},
         1556556160.131795]],
        20),
        'current-loc': loc('DeepTrap/BackgroundSubtraction.py'),
        'editor-state-list': [(loc('DeepTrap/utils.py'),
                               {'attrib-starts': [('miniset',
        65)],
                                'first-line': 63L,
                                'folded-linenos': [],
                                'sel-line': 67L,
                                'sel-line-start': 2283L,
                                'selection_end': 2283L,
                                'selection_start': 2283L,
                                'zoom': 0L}),
                              (loc('train.py'),
                               {'attrib-starts': [],
                                'first-line': 43L,
                                'folded-linenos': [],
                                'sel-line': 45L,
                                'sel-line-start': 1576L,
                                'selection_end': 1601L,
                                'selection_start': 1601L,
                                'zoom': 0L}),
                              (loc('DeepTrap/models/resnet.py'),
                               {'attrib-starts': [('Model',
        12)],
                                'first-line': 15L,
                                'folded-linenos': [],
                                'sel-line': 13L,
                                'sel-line-start': 343L,
                                'selection_end': 347L,
                                'selection_start': 347L,
                                'zoom': 0L}),
                              (loc('DeepTrap/Locations.py'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 5L,
                                'sel-line-start': 92L,
                                'selection_end': 92L,
                                'selection_start': 92L,
                                'zoom': 0L}),
                              (loc('DeepTrap/BackgroundSubtraction.py'),
                               {'attrib-starts': [('BackgroundModel',
        34),
        ('BackgroundModel.resize_sequence',
         69)],
                                'first-line': 64L,
                                'folded-linenos': [],
                                'sel-line': 69L,
                                'sel-line-start': 2066L,
                                'selection_end': 2096L,
                                'selection_start': 2096L,
                                'zoom': 0L}),
                              (loc('DeepTrap/Detector.py'),
                               {'attrib-starts': [('read_data',
        7)],
                                'first-line': 5L,
                                'folded-linenos': [],
                                'sel-line': 11L,
                                'sel-line-start': 288L,
                                'selection_end': 325L,
                                'selection_start': 325L,
                                'zoom': 0L}),
                              (loc('config.yaml'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 3L,
                                'sel-line-start': 211L,
                                'selection_end': 226L,
                                'selection_start': 226L,
                                'zoom': 0L}),
                              (loc('DeepTrap/preprocess.py'),
                               {'attrib-starts': [('resize_image',
        4)],
                                'first-line': 1L,
                                'folded-linenos': [],
                                'sel-line': 16L,
                                'sel-line-start': 515L,
                                'selection_end': 554L,
                                'selection_start': 515L,
                                'zoom': 0L})],
        'has-focus': True,
        'locked': False},
        [loc('DeepTrap/utils.py'),
         loc('train.py'),
         loc('DeepTrap/models/resnet.py'),
         loc('DeepTrap/Locations.py'),
         loc('DeepTrap/BackgroundSubtraction.py'),
         loc('DeepTrap/Detector.py'),
         loc('config.yaml'),
         loc('unknown:untitled-3.py'),
         loc('DeepTrap/preprocess.py')]),
                               'open_files': [u'DeepTrap/utils.py',
        u'DeepTrap/models/resnet.py',
        u'train.py',
        'unknown:untitled-3.py',
        u'DeepTrap/Detector.py',
        u'DeepTrap/preprocess.py',
        u'config.yaml',
        u'DeepTrap/Locations.py',
        u'DeepTrap/BackgroundSubtraction.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.29774730656219395},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         23,
                         1418,
                         877)}]}
guimgr.recent-documents = [loc('DeepTrap/BackgroundSubtraction.py'),
                           loc('DeepTrap/Locations.py'),
                           loc('config.yaml'),
                           loc('DeepTrap/preprocess.py'),
                           loc('DeepTrap/Detector.py'),
                           loc('unknown:untitled-3.py'),
                           loc('train.py'),
                           loc('DeepTrap/models/resnet.py'),
                           loc('DeepTrap/utils.py')]
guimgr.visual-state = {loc('../../../../Library/Python/2.7/site-packages/joblib/_parallel_backends.py'): {'a'\
        'ttrib-starts': [('SafeFunction',
                          337),
                         ('SafeFunction.__call__',
                          347)],
        'first-line': 343L,
        'folded-linenos': [],
        'sel-line': 358L,
        'sel-line-start': 14184L,
        'selection_end': 14184L,
        'selection_start': 14184L,
        'zoom': 0L},
                       loc('../../../../System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/multiprocessing/pool.py'): {'a'\
        'ttrib-starts': [('mapstar',
                          63)],
        'first-line': 103L,
        'folded-linenos': [],
        'sel-line': 64L,
        'sel-line-start': 1995L,
        'selection_end': 1995L,
        'selection_start': 1995L,
        'zoom': 0L},
                       loc('../../../../System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py'): {'a'\
        'ttrib-starts': [('Thread',
                          639),
                         ('Thread.run',
                          751)],
        'first-line': 736L,
        'folded-linenos': [],
        'sel-line': 762L,
        'sel-line-start': 27090L,
        'selection_end': 27090L,
        'selection_start': 27090L,
        'zoom': 0L},
                       loc('../DeepForest/.travis.yml'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 11L,
        'sel-line-start': 248L,
        'selection_end': 270L,
        'selection_start': 270L,
        'zoom': 0L},
                       loc('../DeepForest/DeepForest/SubmitEvaluation.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 142L,
        'selection_end': 161L,
        'selection_start': 161L,
        'zoom': 0L},
                       loc('../DeepForest/DeepForest/fpclib/fpclib/crownSegmenter.py'): {'a'\
        'ttrib-starts': [('smoothenGridDSM',
                          20),
                         ('smoothenGridDSM.averageNeighbors',
                          23)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 521L,
        'selection_end': 532L,
        'selection_start': 532L,
        'zoom': 0L},
                       loc('../DeepForest/DeepForest/fpclib/fpclib/forest.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 226L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepForest/DeepForest/fpclib/fpclib/geometry.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 229L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepForest/DeepForest/fpclib/fpclib/util.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepForest/HPC/StartDask.py'): {'attrib-start'\
        's': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 511L,
        'selection_end': 511L,
        'selection_start': 511L,
        'zoom': 0L},
                       loc('../DeepMeerkat/DeepMeerkat/Meerkat.py'): {'attri'\
        'b-starts': [],
        'first-line': 79L,
        'folded-linenos': [],
        'sel-line': 91L,
        'sel-line-start': 2929L,
        'selection_end': 2992L,
        'selection_start': 2988L,
        'zoom': 0L},
                       loc('../DeepMeerkat/DeepMeerkat/Video.py'): {'attrib-'\
        'starts': [('Video',
                    13),
                   ('Video.cluster_bounding_boxes',
                    252)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 259L,
        'sel-line-start': 9596L,
        'selection_end': 9655L,
        'selection_start': 9651L,
        'zoom': 0L},
                       loc('../DeepMeerkat/StartCloudDataFlow.sh'): {'attrib'\
        '-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 10L,
        'sel-line-start': 226L,
        'selection_end': 253L,
        'selection_start': 253L,
        'zoom': 0L},
                       loc('../DeepMeerkat/run_clouddataflow.py'): {'attrib-'\
        'starts': [('PredictDoFn',
                    9),
                   ('PredictDoFn.process',
                    14)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 542L,
        'selection_end': 563L,
        'selection_start': 563L,
        'zoom': 0L},
                       loc('../DeepMeerkat/training/Classification/Training.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 16L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 835L,
        'selection_end': 847L,
        'selection_start': 847L,
        'zoom': 0L},
                       loc('../DeepMeerkat/training/Classification/sample_photos.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 5L,
        'folded-linenos': [],
        'sel-line': 23L,
        'sel-line-start': 664L,
        'selection_end': 737L,
        'selection_start': 737L,
        'zoom': 0L},
                       loc('../DeepMeerkat/training/Classification/trainer/model.py'): {'a'\
        'ttrib-starts': [('Model',
                          100),
                         ('Model.build_inception_graph',
                          142)],
        'first-line': 136L,
        'folded-linenos': [],
        'sel-line': 149L,
        'sel-line-start': 5316L,
        'selection_end': 5348L,
        'selection_start': 5348L,
        'zoom': 0L},
                       loc('../ExploringDeepMeerkat/Appendix1.md'): {'attrib'\
        '-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../WhalePhys/Cloud/Startup.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 9L,
        'sel-line-start': 249L,
        'selection_end': 249L,
        'selection_start': 249L,
        'zoom': 0L},
                       loc('../dask-jobqueue/dask_jobqueue/core.py'): {'attr'\
        'ib-starts': [('JobQueueCluster',
                       16),
                      ('JobQueueCluster.adapt',
                       130)],
        'first-line': 120L,
        'folded-linenos': [],
        'sel-line': 131L,
        'sel-line-start': 3878L,
        'selection_end': 3883L,
        'selection_start': 3883L,
        'zoom': 0L},
                       loc('../dask-jobqueue/dask_jobqueue/slurm.py'): {'att'\
        'rib-starts': [('SLURMCluster',
                        15),
                       ('SLURMCluster.__init__',
                        32)],
        'first-line': 13L,
        'folded-linenos': [],
        'sel-line': 53L,
        'sel-line-start': 1406L,
        'selection_end': 1434L,
        'selection_start': 1434L,
        'zoom': 0L},
                       loc('../dask-jobqueue/dask_jobqueue/test_slurm.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../dask-jobqueue/test_slurm.py'): {'attrib-start'\
        's': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 187L,
        'selection_end': 187L,
        'selection_start': 187L,
        'zoom': 0L},
                       loc('DeepTrap/BackgroundSubtraction.py'): {'attrib-st'\
        'arts': [('BackgroundModel',
                  35),
                 ('BackgroundModel.run_sequence',
                  148)],
        'first-line': 169L,
        'folded-linenos': [],
        'sel-line': 173L,
        'sel-line-start': 6150L,
        'selection_end': 6186L,
        'selection_start': 6186L,
        'zoom': 0L},
                       loc('DeepTrap/Generator.py'): {'attrib-starts': [('Ge'\
        'nerator',
        13),
        ('Generator.plot_image',
         137)],
        'first-line': 130L,
        'folded-linenos': [],
        'sel-line': 140L,
        'sel-line-start': 4261L,
        'selection_end': 4299L,
        'selection_start': 4299L,
        'zoom': 0L},
                       loc('DeepTrap/Geometry.py'): {'attrib-starts': [],
        'first-line': 117L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepTrap/Locations.py'): {'attrib-starts': [],
        'first-line': 27L,
        'folded-linenos': [],
        'sel-line': 42L,
        'sel-line-start': 1129L,
        'selection_end': 1151L,
        'selection_start': 1151L,
        'zoom': 0L},
                       loc('DeepTrap/__init__.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepTrap/callback.py'): {'attrib-starts': [('Eva'\
        'luate',
        6),
        ('Evaluate.on_epoch_end',
         18)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 38L,
        'sel-line-start': 1354L,
        'selection_end': 1362L,
        'selection_start': 1362L,
        'zoom': 0L},
                       loc('DeepTrap/models/mobilenet.py'): {'attrib-starts': [('M'\
        'odel',
        13),
        ('Model.train',
         18)],
        'first-line': 2L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 671L,
        'selection_end': 708L,
        'selection_start': 693L,
        'zoom': 0L},
                       loc('DeepTrap/models/resnet.py'): {'attrib-starts': [('M'\
        'odel',
        11),
        ('Model.load_model',
         33)],
        'first-line': 37L,
        'folded-linenos': [],
        'sel-line': 38L,
        'sel-line-start': 1250L,
        'selection_end': 1258L,
        'selection_start': 1258L,
        'zoom': 0L},
                       loc('DeepTrap/preprocess.py'): {'attrib-starts': [],
        'first-line': 1L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 49L,
        'selection_end': 49L,
        'selection_start': 49L,
        'zoom': 0L},
                       loc('DeepTrap/utils.py'): {'attrib-starts': [('split_'\
        'training',
        65)],
        'first-line': 59L,
        'folded-linenos': [],
        'sel-line': 68L,
        'sel-line-start': 2431L,
        'selection_end': 2455L,
        'selection_start': 2455L,
        'zoom': 0L},
                       loc('DeepTrap/visualization.py'): {'attrib-starts': [('p'\
        'lot_confusion_matrix',
        74)],
        'first-line': 101L,
        'folded-linenos': [],
        'sel-line': 115L,
        'sel-line-start': 3767L,
        'selection_end': 3826L,
        'selection_start': 3826L,
        'zoom': 0L},
                       loc('HPC/submit_training.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 2L,
        'sel-line-start': 89L,
        'selection_end': 99L,
        'selection_start': 99L,
        'zoom': 0L},
                       loc('config.yaml'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 10L,
        'sel-line-start': 325L,
        'selection_end': 342L,
        'selection_start': 342L,
        'zoom': 0L},
                       loc('download_sample_data.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 37L,
        'sel-line-start': 1190L,
        'selection_end': 1232L,
        'selection_start': 1232L,
        'zoom': 0L},
                       loc('tests/download_sample_location.py'): {'attrib-st'\
        'arts': [],
        'first-line': 2L,
        'folded-linenos': [],
        'sel-line': 11L,
        'sel-line-start': 224L,
        'selection_end': 270L,
        'selection_start': 270L,
        'zoom': 0L},
                       loc('train.py'): {'attrib-starts': [],
        'first-line': 40L,
        'folded-linenos': [],
        'sel-line': 54L,
        'sel-line-start': 2215L,
        'selection_end': 2215L,
        'selection_start': 2215L,
        'zoom': 0L},
                       loc('untitled-6.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../macrosystems/DeepForest/DeepForest/SubmitKeras.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 336L,
        'selection_end': 362L,
        'selection_start': 362L,
        'zoom': 0L},
                       loc('../macrosystems/DeepForest/DeepForest/SubmitRVis.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../macrosystems/DeepForest/RunJob.sh'): {'attrib'\
        '-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 18L,
        'sel-line-start': 330L,
        'selection_end': 330L,
        'selection_start': 330L,
        'zoom': 0L},
                       loc('../macrosystems/DeepForest/SubmitLidar.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 2L,
        'sel-line-start': 42L,
        'selection_end': 65L,
        'selection_start': 65L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/keras/utils/data_utils.py'): {'a'\
        'ttrib-starts': [('get_index',
                          386)],
        'first-line': 388L,
        'folded-linenos': [],
        'sel-line': 400L,
        'sel-line-start': 13745L,
        'selection_end': 13745L,
        'selection_start': 13745L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/core/computation/expressions.py'): {'a'\
        'ttrib-starts': [('set_numexpr_threads',
                          53)],
        'first-line': 52L,
        'folded-linenos': [],
        'sel-line': 56L,
        'sel-line-start': 1213L,
        'selection_end': 1256L,
        'selection_start': 1256L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          97),
                         ('NDFrame.sample',
                          4704)],
        'first-line': 4457L,
        'folded-linenos': [],
        'sel-line': 4838L,
        'sel-line-start': 171912L,
        'selection_end': 171912L,
        'selection_start': 171912L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/core/internals/construction.py'): {'a'\
        'ttrib-starts': [('sanitize_index',
                          508)],
        'first-line': 506L,
        'folded-linenos': [],
        'sel-line': 515L,
        'sel-line-start': 17727L,
        'selection_end': 17746L,
        'selection_start': 17746L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepTrap/lib/python3.7/threading.py'): {'a'\
        'ttrib-starts': [('Thread',
                          738),
                         ('Thread._bootstrap',
                          870)],
        'first-line': 879L,
        'folded-linenos': [],
        'sel-line': 886L,
        'sel-line-start': 31295L,
        'selection_end': 31342L,
        'selection_start': 31342L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('custom',
                        [u'PYTHONPATH=""'])}
proj.pyexec = {None: ('custom',
                      u'/Users/ben/miniconda3/envs/DeepTrap/bin/python')}
proj.vcs-system-config = ('prefs',
                          {'bzr': {'versioncontrol.bzr.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.bzr.executable': u'bzr'},
                           'cvs': {'versioncontrol.cvs.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.cvs.executable': u'cvs',
                                   'versioncontrol.cvs.extra-global-args': '-'\
        'z3'},
                           'git': {'versioncontrol.git.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.git.executable': u'git',
                                   'versioncontrol.git.use-porcelain': True},
                           'hg': {'versioncontrol.hg.active': 'active-if-pro'\
        'ject-dir',
                                  'versioncontrol.hg.dont-find-unregistered': True,
                                  'versioncontrol.hg.executable': u'hg',
                                  'versioncontrol.hg.extra-global-args': '--'\
        'encoding=utf8'},
                           'perforce': {'versioncontrol.perforce.active': 'n'\
        'ot-active',
        'versioncontrol.perforce.dont-find-unregistered': True,
        'versioncontrol.perforce.executable': u'p4',
        'versioncontrol.perforce.extra-global-args': ''},
                           'svn': {'versioncontrol.svn.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.svn.executable': u'svn',
                                   'versioncontrol.svn.extra-global-args': '',
                                   'versioncontrol.svn.svnadmin-executable': u'svnadmin'}})
search.search-history = [u'resize',
                         u'self.resi',
                         u'self.re',
                         u'create',
                         u'create_background',
                         u'sort_locations',
                         u'self.pre',
                         u'compile',
                         u'gpu',
                         u'Model',
                         u'postprocess',
                         u'draw',
                         u'draw_box',
                         u'Rect',
                         u'get_parent_bounding_box',
                         u'cluster_',
                         u'draw_bpx',
                         u'post',
                         u'find_conto',
                         u'find_bounding_box']
testing.stored-results = (1,
                          [],
                          {})
