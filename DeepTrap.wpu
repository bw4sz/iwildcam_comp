#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.breakpoints = {loc('tests/test_utils.py'): {15L: (0,
        None,
        1,
        0)}}
debug.err-values = {None: {},
                    loc('../DeepMeerkat/training/Classification/pipeline.py'): {},
                    loc('DeepTrap/BackgroundSubtraction.py'): {},
                    loc('DeepTrap/Detector.py'): {},
                    loc('DeepTrap/Locations.py'): {},
                    loc('train.py'): {}}
debug.recent-run-args = {loc('../DeepMeerkat/DeepMeerkat/Meerkat.py'): [u'--training',
        u'--training_mode',
        u'--input "asdasd.avi"',
        u'--threaded',
        u'--threaded --i /Users/ben/Dropbox/HummingbirdProject/Completed_Frames/Sachatamia/foundframes/201710',
        u' --i /Users/ben/Dropbox/HummingbirdProject/Completed_Frames/Sachatamia/foundframes/201710',
        u'--threaded /--i Users/ben/Dropbox/HummingbirdProject/Completed_Frames/Sachatamia/foundframes/201710',
        u'--threaded /--i Users/ben/Dropbox/HummingbirdProject/Data/Sachatamia/foundframes/201710'],
                         loc('../DeepMeerkat/DeepMeerkat/main.py'): [u'--threaded'],
                         loc('../DeepMeerkat/training/Classification/Training.sh'): [u'--train_input_path Samples/Training/trainingdata.csv \n--eval_input_path Samples/Testing/testingdata.csv\n--input_dict Samples/dict.txt\n--output_dir Output'],
                         loc('../DeepMeerkat/training/Classification/pipeline.py'): [u'    --train_input_path Samples/Training/trainingdata.csv \n    --eval_input_path Samples/Testing/testingdata.csv\n    --input_dict Samples/dict.txt\n    --output_dir Output/'],
                         loc('../DeepMeerkat/training/Classification/trainer/preprocess.py'): [u'--input_path /Users/ben/Documents/DeepMeerkat/training/Classification/Samples/Training/trainingdata.csv --input_dict /Users/ben/Documents/DeepMeerkat/training/Classification/Samples/dict.txt --output_path Output',
        u'--input_path Samples/Training/trainingdata.csv --input_dict /Users/ben/Documents/DeepMeerkat/training/Classification/Samples/dict.txt --output_path Output',
        u'--input_path /Users/ben/Documents/DeepMeerkat/training/Classification/Samples/Training/trainingdata.csv --input_dict /Users/ben/Documents/DeepMeerkat/training/Classification/Samples/dict.txt --output_path /Users/ben/Documents/DeepMeerkat/training/Classification/Output',
        u'--input_path Samples/Training/trainingdata.csv --input_dict Samples/dict.txt --output_path Output',
        u'--input_path Samples/Training/trainingdata.csv --input_dict Samples/dict.txt',
        u'--input_path Samples/Training/trainingdata.csv\n\n--input_dict Samples/dict.txt',
        u'--input_path Samples/Training/trainingdata.csv\n--input_dict Samples/dict.txt',
        u'--input_path Samples/Training/trainingdata.csv ',
        u'Samples/Training/trainingdata.csv '],
                         loc('train.py'): [u'--debug']}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'XJhyfDuUfSFS1sBEXYhXqlW2zq'\
        'uzgXJC',
        'size-state': 'fullscreen',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.23447313328681085,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [(4,),
        (7,)],
                                 'selected-nodes': [(4,
        10)],
                                 'top-node': (4,
        4)}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [5,
                          0],
        'notebook_display': 'normal',
        'notebook_percent': 0.5,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': u'scheduler',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'cv2',
                                       'fReverse': False,
                                       'fSearchText': u'plot',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': True,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('testing',
                      'wide',
                      0,
                      {'added-files': [loc('tests/test_H5Generator.py')],
                       'filter': u'',
                       'recent-filters': None,
                       'sort-order': 'alpha',
                       'tree-state': {'expanded-nodes': [(0,),
        (1,),
        (2,),
        (2,
         1)],
                                      'selected-nodes': [(2,)],
                                      'top-node': (0,)}}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 6897L,
                       'folded-linenos': [],
                       'history': {None: ['self.image_dict[image_index].keys'\
        '()\n',
        'self.image_dict[image_index\n',
        'self.image_dict[image_index]\n',
        'import pandas as pd\n',
        "#Load an image from file based on location\nlocation = self.image_d"\
        "ict[image_index][\"location\"]\n\nif location != self.previous_loca"\
        "tion:\n    h5_name = os.path.join(self.h5_dir,\"{}.h5\".format(loca"\
        "tion))\n    self.hf = h5py.File(h5_name, 'r')\n    \n    #load file"\
        "name csv\n    csv_name = os.path.join(self.h5_dir,\"{}.csv\".format"\
        "(location))\n    self.filename_csv = pd.DataFrame.from_csv(csv_name"\
        ")\n    \n    #reset location for easy loading\n    self.previous_lo"\
        "cation = location\n\n",
        'self.filename_csv.columns\n',
        'self.filename_csv = pd.DataFrame.from_csv(csv_name,index=False)\n',
        'self.filename_csv = pd.read_csv(csv_name,index=False)\n',
        'self.filename_csv = pd.read_csv(csv_name)\n',
        '  self.filename_csv\n',
        'h5_index = self.filename_csv[image_index==self.filename_csv.filenam'\
        'e].h5_index.values[0]\n',
        'order\n',
        'self.image_dict\n',
        'self.filename_csv[image_index==self.filename_csv.filename].h5_index'\
        '.values[0]\n',
        'self.filename_csv[image_index==self.filename_csv.filename].h5_index'\
        '.values\n',
        'self.filename_csv[image_index==self.filename_csv.filename].h5_index'\
        '\n',
        'self.filename_csv\n',
        'h5_index = self.filename_csv[image_index==self.filename_csv.filenam'\
        'e].h5_index.values.astype("int")[0]\n',
        'h5_index\n',
        'train_df[train_df.location==79]\n',
        'self.data\n',
        'image_index\n',
        'filename_csv.filename\n',
        'train_df[train_df.location==21].shape'],
                                   u'file:/Applications/WingIDE.app/Contents/Resources/src/testing/runners/run_unittests_xml.py': ['l'\
        'oc_21.shape\n',
        'loc_21.groupby("daynight")\n',
        'loc_21.groupby("day_night")\n',
        'loc_21.groupby("day_night").size()\n',
        'loc_21["in_file"] = loc_21.file_name in sample_csv.filenames\n',
        'loc_21["in_file"] = loc_21.file_name in sample_csv.filename\n',
        'sample_csv.columns\n',
        'sample_csv\n',
        'loc_21["in_file"] = loc_21.file_name.apply(lambda x: x in sample_cs'\
        'v.filename) \n',
        'loc_21.file_name.values\n',
        'loc_21.file_name.values in sample_csv.file_name\n',
        'loc_21.file_name.values in sample_csv.filename\n',
        'loc_21.file_name.values in sample_csv.filename.values\n',
        'loc_21.file_name.values == sample_csv.filename.values\n',
        'loc_21\n',
        'loc_21.file_name\n',
        'loc_21[loc_21.daynight == "day"]\n',
        'loc_21[loc_21.day_night == "day"]\n',
        'loc_21[loc_21.day_night == "day"].file_name\n',
        'loc_21[loc_21.day_night == "day"].file_name.values\n',
        'a =loc_21[loc_21.day_night == "day"].file_name.values\n',
        'a[1] in sample_csv.filename\n',
        'a[10] in sample_csv.filename\n',
        'train_df[train_df.location ==128].shape\n',
        'train_df[train_df.location ==128].groupby("day_night").size()\n',
        'sample_csv = pd.read_csv(os.path.join(destination_dir,"128.csv"))\n',
        'train_df[train_df.location ==128].file_name.values\n',
        'a = train_df[train_df.location ==128 & train_df.day_night =="day"].'\
        'file_name.values\n',
        'a\n',
        'a[0] in sample_csv.filename\n',
        'ample_csv.filename\n',
        'sample_csv.filename\n',
        'a = train_df[(train_df.location ==128) & (train_df.day_night =="nig'\
        'ht")].file_name.values\n',
        'a[0]\n',
        'a[0] in sample_csv.file_name\n',
        'a[0] in sample_csv.file_name.values\n',
        'a = train_df[(train_df.location ==128) & (train_df.day_night =="day'\
        '")].file_name.values\n',
        'a[0] in sample_csv.filename.values\n',
        'location = location_data["day"].location.unique()[0]\n',
        'images\n',
        'im_thresh_color = cv2.bitwise_and(image, mask3)\n',
        'im_thresh_color\n',
        'len(location_data)\n',
        'keys = list(location_data.keys())\nn_images = 0\nfor key in keys:\n'\
        '    n_images += location_data[key].shape[0]\n\n',
        'n_images\n',
        'animal_predictions = prediction_data[prediction_data != 0]\n',
        'prediction_data[prediction_data != 0]    \n',
        ' len(dcounts.values) \n',
        'dcounts.head\n',
        'len(dcounts.values)\n',
        'dcounts.head(1).index.values[0]\n',
        'top_class  = dcounts.head(1).index.values[0]\n',
        'top_class\n',
        'data\n',
        'en(dcounts.values)\n',
        'dcounts\n',
        'dcounts.values\n',
        'dcounts.values[1]\n',
        'dcounts.values[0]\n',
        'dcounts.values[0] == dcounts.values[1]\n',
        'desired_output\n',
        'prediction_data = pd.read_csv("/Users/ben/Documents/iwildcam_comp/t'\
        'ests/data/sample_prediction.csv")\n',
        'prediction_data = utils.sequence_voting(prediction_data)\n',
        'most_common = most_common.dropna().to_dict().astype("int")\n',
        'most_common.dropna()\n',
        'most_common.dropna().astype("int").\n',
        'most_common.dropna().astype("int")\n',
        'most_common.dropna().astype("int").to_dict()\n',
        'most_common = animal_predictions.groupby("seq_id").apply(lambda x: '\
        'top_class_no_ties(x))\n\n#drop Nas\nmost_common = most_common.dropn'\
        'a().astype("int").to_dict()\n\nanimal_predictions["predictions"] = '\
        'animal_predictions["seq_id"].map(most_common)\n\n',
        'animal_predictions = prediction_data[prediction_data.predictions !='\
        ' 0]    \n\n#Get each sequence and find most common animal predictio'\
        'n\nmost_common = animal_predictions.groupby("seq_id").apply(lambda '\
        'x: top_class_no_ties(x))\n\n#drop Nas\nmost_common = most_common.dr'\
        'opna().astype("int").to_dict()\n\n',
        'animal_predictions["seq_id"].map(most_common)\n',
        'animal_predictions["seq_id"].map(most_common).dropna()\n',
        'most_common = most_common.dropna().to_dict()\n',
        'animal_predictions = prediction_data[prediction_data.predictions !='\
        ' 0]    \n\n#Get each sequence and find most common animal predictio'\
        'n\nmost_common = animal_predictions.groupby("seq_id").apply(lambda '\
        'x: top_class_no_ties(x))\n\n#drop Nas\nmost_common = most_common.dr'\
        'opna().to_dict()\n\n',
        'animal_predictions["seq_id"].map(most_common).dropna().astype("int"'\
        ')\n',
        'animal_predictions["predictions"] = animal_predictions["seq_id"].ma'\
        'p(most_common).dropna().astype("int")\n',
        'animal_predictions.dropna().astype("int")\n',
        'animal_predictions = animal_predictions.dropna().astype("int")\n',
        'prediction_data.update(animal_predictions).astype("int")\n',
        'prediction_data.astype("int")\n',
        'animal_predictions = prediction_data[prediction_data.predictions !='\
        ' 0]    \n\n#Get each sequence and find most common animal predictio'\
        'n\nmost_common = animal_predictions.groupby("seq_id").apply(lambda '\
        'x: top_class_no_ties(x))\n\nmost_common = most_common.dropna().to_d'\
        'ict()\n\n',
        'most_common = most_common.dropna().astype("int").to_dict()\n',
        'animal_predictions = prediction_data[prediction_data.predictions !='\
        ' 0]    \n\n#Get each sequence and find most common animal predictio'\
        'n\nmost_common = animal_predictions.groupby("seq_id").apply(lambda '\
        'x: top_class_no_ties(x))\nmost_common = most_common.dropna().astype'\
        '("int").to_dict()\n\n',
        'animal_predictions["predictions"] = animal_predictions["seq_id"].ma'\
        'p(most_common)\n',
        'animal_predictions.dropna()\n',
        'animal_predictions.predictions.astype("int")\n',
        'animal_predictions["predictions"] = animal_predictions.predictions.'\
        'astype("int")\n',
        'prediction_data.update(animal_predictions)\n',
        'animal_predictions\n',
        'animal_predictions.type\n',
        'animal_predictions.types\n',
        'animal_predictions.dtypes\n',
        'prediction_data\n',
        'animal_predictions = prediction_data[prediction_data.predictions !='\
        ' 0]\n',
        'most_common = animal_predictions.groupby("seq_id").apply(lambda x: '\
        'top_class_no_ties(x))\n',
        'most_common\n',
        'most_common = most_common[most_common!=-99].to_dict()\n',
        'prediction_data["new_predictions"] = prediction_data["seq_id"].map('\
        'most_common)\n',
        'prediction_data.new_predictions\n',
        'new_predictions = new_predictions.dropna()\n'],
                                   u'file:/Users/ben/Documents/iwildcam_comp/train.py': ['t'\
        'raining_split.locations\n',
        'training_split.location.size()\n',
        'training_split.location\n',
        'training_split.location.nunique\n',
        'training_split.location.nunique()\n',
        'empty_seq = training_split[training_split.category_id==0].groupby("'\
        'location").apply(lambda x: x.seq_id.drop_duplicates().sample(20))\n',
        'empty_seq = training_split[training_split.category_id==0].groupby("'\
        'location").apply(lambda x: x.seq_id.drop_duplicates().head(20))\n',
        'empty_seq = training_split[training_split.category_id==0].groupby("'\
        'location").apply(lambda x: x.seq_id.drop_duplicates().head(30))\n',
        'empty_seq = training_split[training_split.category_id==0].groupby("'\
        'location").apply(lambda x: x.seq_id.drop_duplicates().head(50))\n',
        'empty_seq = training_split[training_split.category_id==0].groupby("'\
        'location").apply(lambda x: x.seq_id.drop_duplicates().head(100))\n',
        'empty_seq.shape\n',
        'empty_images = training_split[training_split.seq_id.isin(empty_seq)'\
        '].groupby("seq_id").apply(lambda x: x.sample(1))\n',
        'empty_images.shape\n',
        'animal_images = training_split[training_split.category_id!=0]\n',
        'animal_images.shape\n',
        'animal_images.',
        'import pandas as pd\n',
        'training_split = pd.concat([empty_images, animal_images])\n',
        'training_split.groupby("category_id")\n',
        'training_split.shape\n',
        'training_split.groupby("category_id").size()\n',
        'training_split.groupby("category_id").size()',
        'empty_images = training_split[training_split.seq_id.isin(empty_seq)'\
        ' & training_split.category_id==0].groupby("seq_id").apply(lambda x:'\
        ' x.sample(1))\n',
        'training_split[training_split.seq_id.isin(empty_seq) & training_spl'\
        'it.category_id==0].shape\n',
        'empty_images_names = training_split[training_split.seq_id.isin(empt'\
        'y_seq) & training_split.category_id==0].groupby("seq_id").apply(lam'\
        'bda x: x.file_name.sample(1))\n',
        'training_split[training_split.seq_id in empty_seq & training_split.'\
        'category_id==0]\n',
        'training_split[training_split.seq_id in empty_seq & training_split.'\
        'category_id==0]empty_seq\n',
        '        empty_seq = training_split[training_split.category_id==0].g'\
        'roupby("location").apply(lambda x: x.seq_id.drop_duplicates().head('\
        '1))\n',
        'empty_seq\n',
        'training_split[training_split.seq_id.isin(empty_seq) & training_spl'\
        'it.category_id==0]\n',
        'empty_seq = training_split[training_split.category_id==0].groupby("'\
        'location").apply(lambda x: x.seq_id.drop_duplicates().head(1))\n',
        'training_split[training_split.seq_id.isin(empty_seq) & (training_sp'\
        'lit.category_id==0)]\n',
        'empty_images_names = training_split[training_split.seq_id.isin(empt'\
        'y_seq) & (training_split.category_id==0)].groupby("seq_id").apply(l'\
        'ambda x: x.file_name.sample(1))\n',
        'empty_images_names\n',
        'empty_seq = training_split[training_split.category_id==0].groupby("'\
        'location").apply(lambda x: x.seq_id.drop_duplicates().head(200))\n',
        'empty_images_names = training_split[training_split.seq_id.isin(empt'\
        'y_seq) & (training_split.category_id==0)].groupby("seq_id").apply(l'\
        'ambda x: x.sample(1))\n',
        'empty_images_names.shape\n',
        'prediction_df=results\n',
        'data =self.generator.data\n',
        'prediction_data=prediction_df(data[["file_name","seq_id"]])\n',
        'prediction_data=prediction_df.merge(data[["file_name","seq_id"]])\n',
        'prediction_df\n',
        "most_common = prediction_data.groupby(['seq_id']).agg(lambda x:x.va"\
        "lue_counts().index[0])\n",
        "prediction_data.groupby(['seq_id']).agg(lambda x:x.value_counts()\n",
        "prediction_data.groupby(['seq_id']).agg(lambda x:x.value_counts())"\
        "\n",
        "most_common = prediction_data.groupby(['seq_id']).agg(lambda x:x.va"\
        "lue_counts().predictions[0])\n",
        "most_common = prediction_data.groupby(['seq_id']).agg(lambda x:x.va"\
        "lue_counts()predictions[0])\n",
        'prediction_data.value_counts\n',
        'prediction_data.value_counts()\n',
        "most_common = prediction_data.groupby(['seq_id']).agg(lambda x:x.va"\
        "lue_counts(\"predictions\")[0])\n",
        "most_common = prediction_data.groupby(['seq_id']).agg(lambda x:x.va"\
        "lue_counts(\"predictions\"))\n",
        'prediction_data.value_counts("predictions")\n',
        'prediction_data.prediction.value_counts()\n',
        'prediction_data.predictions.value_counts()\n',
        'prediction_data.predictions.value_counts().head(0)\n',
        'prediction_data.predictions.value_counts().head(1)\n',
        'prediction_data.predictions.value_counts().head(1).values()\n',
        'prediction_data.predictions.value_counts().head(1).values\n',
        'prediction_data.predictions.value_counts().head(1).values[0]\n',
        'prediction_data.groupby("seq_id").predictions.value_counts().head(1'\
        ').values[0]\n',
        'prediction_data.groupby("seq_id").apply(lambda x: x.predictions.val'\
        'ue_counts().head(1).values[0])\n',
        'most_common = prediction_data.groupby("seq_id").apply(lambda x: x.p'\
        'redictions.value_counts().head(1).values[0])\n',
        'most_common.columns\n',
        'most_common.index\n',
        'most_common.to_dict()\n',
        'prediction_data["new_category_id"] = prediction_data["seq_id"].map('\
        'most_common)\n',
        'prediction_data["new_category_id"] \n',
        'max_category = prediction_data.groupby("seq_id").apply(lambda x: x.'\
        'predictions.max()).to_dict()\n',
        'most_common = animal_predictions.groupby("seq_id").apply(lambda x: '\
        'x.predictions.value_counts().head(1).values[0]).to_dict()\n',
        'animal_predictions["category_id"]\n',
        'prediction_data\n',
        'prediction_data.category_id\n',
        'prediction_df.columnns\n',
        'prediction_df.columns\n',
        'prediction_data.ground_truth\n',
        'animal_predictions.colunns\n',
        'most_common\n',
        'animal_predictions["category_id"] = animal_predictions["seq_id"].ma'\
        'p(most_common)\n',
        'prediction_data.columns\n',
        'animal_predictions[["predictions","category_id"]]\n',
        'prediction_data[["predictions","category_id"]]\n',
        'prediction_data[["predictions"]]\n',
        'prediction_data=prediction_df.merge(data[["file_name","seq_id"]], l'\
        'eft_on ="filename", right_on ="file_name")\n',
        'prediction_data.predictions\n',
        'prediction_data[["predictions","seq_id"]]\n',
        'animal_predictions = prediction_data[prediction_data != 0]\n',
        'most_common = animal_predictions.groupby("seq_id").apply(lambda x: '\
        'x.predictions.value_counts().head(1).index.values[0]).to_dict()\n',
        'animal_predictions["predictions"] = animal_predictions["seq_id"].ma'\
        'p(most_common)\n',
        'animal_predictions["predictions"\n',
        'animal_predictions["predictions"]\n',
        'prediction_data.update(animal_predictions)\n',
        'prediction_data["predictions"]\n',
        'animal_predictions\n',
        'animal_predictions.\n',
        'dcounts\n',
        'if len(dcounts.values) > 0:\n    if dcounts.values[0] == dcounts.va'\
        'lues[1]:\n        return None\nelse:\n    top_class  = dcounts.head'\
        '(1).index.values[0]\n\n',
        'if len(dcounts.values) > 1:\n    if dcounts.values[0] == dcounts.va'\
        'lues[1]:\n        return None\nelse:\n    top_class  = dcounts.head'\
        '(1).index.values[0]\n\n',
        'len(dcounts.values)\n',
        'if len(dcounts.values) > 1:\n    if dcounts.values[0] == dcounts.va'\
        'lues[1]:\n        print("hi")\nelse:\n    top_class  = dcounts.head'\
        '(1).index.values[0]\n\n',
        'top_class\n']},
                       'launch-id': None,
                       'sel-line': 6912L,
                       'sel-line-start': 344606L,
                       'selection_end': 344606L,
                       'selection_start': 344606L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 494L,
                       'folded-linenos': [],
                       'history': {None: ['from DeepTrap import utils\n',
        'utils.classes\n',
        'import h5py\nimport matplotlib.pyplot as plt\nimport cv2\n\nfrom De'\
        'epTrap import utils\ntrain_df = utils.read_train_data(image_dir)\n'\
        '\n',
        'f=h5py.File("20.h5","r")\n',
        'f=h5py.File("/Users/ben/Downloads/train/21.h5","r")\n',
        'f\n',
        'filenames = f["filenames"]\n',
        'filenames\n',
        'for x in filenames:\n    print(x)\n\n',
        'train_df = utils.read_train_data(config["train_data_path"])\n',
        'config = utils.read_config()\ntrain_df = utils.read_train_data(conf'\
        'ig["train_data_path"])\n\n',
        'train_df.file_name\n',
        'train_df.file_name.values.astype("S")\n',
        'train_df.file_name.values.astype("S")[0]\n',
        'train_df.file_name.values.astype("S")[0] in train_df.file_name\n',
        'train_df.file_name.values.astype("S")[0] in train_df.file_name.valu'\
        'es.astype("S")\n',
        'import h5py\n',
        'f=h5py.File("79.h5")\n',
        'f["images"]\n',
        'tr\n',
        'train_df[train_df.location==79]\n',
        'train_df[train_df.location==79].file_name\n',
        'f=h5py.File("79.h5")',
        'train_df\n',
        'train_df[train_df.location==21]\n',
        'train_df[train_df.location==21].shape\n',
        'train_df[train_df.location==21].shape[0]\n',
        'train_df[train_df.location==36].shape[0]\n']},
                       'launch-id': None,
                       'sel-line': 498L,
                       'sel-line-start': 26329L,
                       'selection_end': 26348L,
                       'selection_start': 26348L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('DeepTrap/utils.py'),
        {'attrib-starts': [('sequence_voting',
                            112)],
         'first-line': 108L,
         'folded-linenos': [],
         'sel-line': 118L,
         'sel-line-start': 4509L,
         'selection_end': 4530L,
         'selection_start': 4530L,
         'zoom': 0L},
        1557178125.712027],
        [loc('tests/test_utils.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 4L,
          'sel-line-start': 162L,
          'selection_end': 162L,
          'selection_start': 162L,
          'zoom': 0L},
         1557178127.460881],
        [loc('../../miniconda3/envs/DeepTrap/lib/python3.7/unittest/loader.py'),
         {'attrib-starts': [('_FailedTest',
                             22),
                            ('_FailedTest.__getattr__',
                             29),
                            ('_FailedTest.__getattr__.testFailure',
                             32)],
          'first-line': 17L,
          'folded-linenos': [],
          'sel-line': 33L,
          'sel-line-start': 761L,
          'selection_end': 761L,
          'selection_start': 761L,
          'zoom': 0L},
         1557178147.26538],
        [loc('tests/test_utils.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 0L,
          'sel-line-start': 0L,
          'selection_end': 11L,
          'selection_start': 11L,
          'zoom': 0L},
         1557178152.460636],
        [loc('DeepTrap/utils.py'),
         {'attrib-starts': [('sequence_voting',
                             112)],
          'first-line': 123L,
          'folded-linenos': [],
          'sel-line': 121L,
          'sel-line-start': 4655L,
          'selection_end': 4667L,
          'selection_start': 4667L,
          'zoom': 0L},
         1557178169.563689],
        [loc('tests/test_utils.py'),
         {'attrib-starts': [('test_voting',
                             11)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 12L,
          'sel-line-start': 491L,
          'selection_end': 520L,
          'selection_start': 520L,
          'zoom': 0L},
         1557178182.313799],
        [loc('DeepTrap/utils.py'),
         {'attrib-starts': [('sequence_voting',
                             112)],
          'first-line': 112L,
          'folded-linenos': [],
          'sel-line': 124L,
          'sel-line-start': 4767L,
          'selection_end': 4829L,
          'selection_start': 4829L,
          'zoom': 0L},
         1557178248.092261],
        [loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/util/testing.py'),
         {'attrib-starts': [('raise_assert_detail',
                             1063)],
          'first-line': 1077L,
          'folded-linenos': [],
          'sel-line': 1093L,
          'sel-line-start': 35337L,
          'selection_end': 35337L,
          'selection_start': 35337L,
          'zoom': 0L},
         1557178252.54238],
        [loc('DeepTrap/utils.py'),
         {'attrib-starts': [('sequence_voting',
                             112)],
          'first-line': 116L,
          'folded-linenos': [],
          'sel-line': 127L,
          'sel-line-start': 5035L,
          'selection_end': 5039L,
          'selection_start': 5039L,
          'zoom': 0L},
         1557178898.856777],
        [loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/util/testing.py'),
         {'attrib-starts': [('raise_assert_detail',
                             1063)],
          'first-line': 1083L,
          'folded-linenos': [],
          'sel-line': 1093L,
          'sel-line-start': 35337L,
          'selection_end': 35337L,
          'selection_start': 35337L,
          'zoom': 0L},
         1557178916.636947],
        [loc('DeepTrap/utils.py'),
         {'attrib-starts': [('sequence_voting',
                             112)],
          'first-line': 116L,
          'folded-linenos': [],
          'sel-line': 129L,
          'sel-line-start': 5149L,
          'selection_end': 5196L,
          'selection_start': 5149L,
          'zoom': 0L},
         1557178957.801559],
        [loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/core/generic.py'),
         {'attrib-starts': [('NDFrame',
                             97),
                            ('NDFrame.__getattr__',
                             5052)],
          'first-line': 5057L,
          'folded-linenos': [],
          'sel-line': 5066L,
          'sel-line-start': 178974L,
          'selection_end': 178974L,
          'selection_start': 178974L,
          'zoom': 0L},
         1557179013.960703],
        [loc('DeepTrap/utils.py'),
         {'attrib-starts': [('sequence_voting',
                             112)],
          'first-line': 114L,
          'folded-linenos': [],
          'sel-line': 129L,
          'sel-line-start': 5111L,
          'selection_end': 5115L,
          'selection_start': 5115L,
          'zoom': 0L},
         1557179151.184274],
        [loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/util/testing.py'),
         {'attrib-starts': [('raise_assert_detail',
                             1063)],
          'first-line': 1078L,
          'folded-linenos': [],
          'sel-line': 1093L,
          'sel-line-start': 35337L,
          'selection_end': 35337L,
          'selection_start': 35337L,
          'zoom': 0L},
         1557179200.19047],
        [loc('DeepTrap/utils.py'),
         {'attrib-starts': [('sequence_voting',
                             112)],
          'first-line': 114L,
          'folded-linenos': [],
          'sel-line': 130L,
          'sel-line-start': 5118L,
          'selection_end': 5122L,
          'selection_start': 5122L,
          'zoom': 0L},
         1557179546.145874],
        [loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/util/testing.py'),
         {'attrib-starts': [('raise_assert_detail',
                             1063)],
          'first-line': 1078L,
          'folded-linenos': [],
          'sel-line': 1093L,
          'sel-line-start': 35337L,
          'selection_end': 35337L,
          'selection_start': 35337L,
          'zoom': 0L},
         1557179561.66583],
        [loc('DeepTrap/utils.py'),
         {'attrib-starts': [('sequence_voting',
                             112)],
          'first-line': 123L,
          'folded-linenos': [],
          'sel-line': 130L,
          'sel-line-start': 5118L,
          'selection_end': 5122L,
          'selection_start': 5122L,
          'zoom': 0L},
         1557179568.487154],
        [loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/util/testing.py'),
         {'attrib-starts': [('raise_assert_detail',
                             1063)],
          'first-line': 1078L,
          'folded-linenos': [],
          'sel-line': 1093L,
          'sel-line-start': 35337L,
          'selection_end': 35337L,
          'selection_start': 35337L,
          'zoom': 0L},
         1557179571.494558],
        [loc('tests/test_utils.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 18L,
          'sel-line-start': 638L,
          'selection_end': 638L,
          'selection_start': 638L,
          'zoom': 0L},
         1557179885.823135],
        [loc('tests/test_utils.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 0L,
          'sel-line-start': 0L,
          'selection_end': 11L,
          'selection_start': 0L,
          'zoom': 0L},
         1557179887.548937]],
        20),
        'current-loc': loc('tests/test_utils.py'),
        'editor-state-list': [(loc('tests/test_utils.py'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 0L,
                                'sel-line-start': 0L,
                                'selection_end': 11L,
                                'selection_start': 0L,
                                'zoom': 0L}),
                              (loc('DeepTrap/visualization.py'),
                               {'attrib-starts': [('plot_images',
        9)],
                                'first-line': 6L,
                                'folded-linenos': [],
                                'sel-line': 23L,
                                'sel-line-start': 797L,
                                'selection_end': 842L,
                                'selection_start': 842L,
                                'zoom': 0L}),
                              (loc('DeepTrap/utils.py'),
                               {'attrib-starts': [('sequence_voting',
        112)],
                                'first-line': 123L,
                                'folded-linenos': [],
                                'sel-line': 130L,
                                'sel-line-start': 5118L,
                                'selection_end': 5122L,
                                'selection_start': 5122L,
                                'zoom': 0L}),
                              (loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/util/testing.py'),
                               {'attrib-starts': [('raise_assert_detail',
        1063)],
                                'first-line': 1078L,
                                'folded-linenos': [],
                                'sel-line': 1093L,
                                'sel-line-start': 35337L,
                                'selection_end': 35337L,
                                'selection_start': 35337L,
                                'zoom': 0L})],
        'has-focus': False,
        'locked': False},
        [loc('tests/test_utils.py'),
         loc('DeepTrap/visualization.py'),
         loc('DeepTrap/utils.py'),
         loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/util/testing.py')]),
                               'open_files': [u'DeepTrap/visualization.py',
        u'DeepTrap/utils.py',
        u'tests/test_utils.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.5036697247706422},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         0,
                         1440,
                         900)}]}
guimgr.recent-documents = [loc('tests/test_utils.py'),
                           loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/util/testing.py'),
                           loc('DeepTrap/utils.py'),
                           loc('DeepTrap/visualization.py')]
guimgr.visual-state = {loc('../../../../Applications/WingIDE.app/Contents/Resources/src/testing/runners/wingtest_common.py'): {'a'\
        'ttrib-starts': [('XmlStream',
                          83),
                         ('XmlStream.__getattr__',
                          102)],
        'first-line': 98L,
        'folded-linenos': [],
        'sel-line': 103L,
        'sel-line-start': 3252L,
        'selection_end': 3252L,
        'selection_start': 3252L,
        'zoom': 0L},
                       loc('../../../../Library/Python/2.7/site-packages/joblib/_parallel_backends.py'): {'a'\
        'ttrib-starts': [('SafeFunction',
                          337),
                         ('SafeFunction.__call__',
                          347)],
        'first-line': 343L,
        'folded-linenos': [],
        'sel-line': 358L,
        'sel-line-start': 14184L,
        'selection_end': 14184L,
        'selection_start': 14184L,
        'zoom': 0L},
                       loc('../../../../System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/multiprocessing/pool.py'): {'a'\
        'ttrib-starts': [('mapstar',
                          63)],
        'first-line': 103L,
        'folded-linenos': [],
        'sel-line': 64L,
        'sel-line-start': 1995L,
        'selection_end': 1995L,
        'selection_start': 1995L,
        'zoom': 0L},
                       loc('../../../../System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py'): {'a'\
        'ttrib-starts': [('Thread',
                          639),
                         ('Thread.run',
                          751)],
        'first-line': 736L,
        'folded-linenos': [],
        'sel-line': 762L,
        'sel-line-start': 27090L,
        'selection_end': 27090L,
        'selection_start': 27090L,
        'zoom': 0L},
                       loc('../DeepForest/.travis.yml'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 11L,
        'sel-line-start': 248L,
        'selection_end': 270L,
        'selection_start': 270L,
        'zoom': 0L},
                       loc('../DeepForest/DeepForest/SubmitEvaluation.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 142L,
        'selection_end': 161L,
        'selection_start': 161L,
        'zoom': 0L},
                       loc('../DeepForest/DeepForest/fpclib/fpclib/crownSegmenter.py'): {'a'\
        'ttrib-starts': [('smoothenGridDSM',
                          20),
                         ('smoothenGridDSM.averageNeighbors',
                          23)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 521L,
        'selection_end': 532L,
        'selection_start': 532L,
        'zoom': 0L},
                       loc('../DeepForest/DeepForest/fpclib/fpclib/forest.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 226L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepForest/DeepForest/fpclib/fpclib/geometry.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 229L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepForest/DeepForest/fpclib/fpclib/util.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepForest/HPC/StartDask.py'): {'attrib-start'\
        's': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 511L,
        'selection_end': 511L,
        'selection_start': 511L,
        'zoom': 0L},
                       loc('../DeepLidar/DeepForest/Generate.py'): {'attrib-'\
        'starts': [('run',
                    27)],
        'first-line': 85L,
        'folded-linenos': [],
        'sel-line': 169L,
        'sel-line-start': 6198L,
        'selection_end': 6240L,
        'selection_start': 6240L,
        'zoom': 0L},
                       loc('../DeepLidar/DeepForest/h5_generator.py'): {'att'\
        'rib-starts': [('H5Generator',
                        26),
                       ('H5Generator.load_image',
                        149)],
        'first-line': 187L,
        'folded-linenos': [],
        'sel-line': 179L,
        'sel-line-start': 5863L,
        'selection_end': 5915L,
        'selection_start': 5915L,
        'zoom': 0L},
                       loc('../DeepLidar/analysis/test_h5.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 7L,
        'folded-linenos': [],
        'sel-line': 14L,
        'sel-line-start': 238L,
        'selection_end': 794L,
        'selection_start': 238L,
        'zoom': 0L},
                       loc('../DeepLidar/dask_generate.py'): {'attrib-starts': [('t'\
        'est_h5',
        112)],
        'first-line': 104L,
        'folded-linenos': [],
        'sel-line': 112L,
        'sel-line-start': 3345L,
        'selection_end': 3357L,
        'selection_start': 3357L,
        'zoom': 0L},
                       loc('../DeepMeerkat/DeepMeerkat/Meerkat.py'): {'attri'\
        'b-starts': [],
        'first-line': 79L,
        'folded-linenos': [],
        'sel-line': 91L,
        'sel-line-start': 2929L,
        'selection_end': 2992L,
        'selection_start': 2988L,
        'zoom': 0L},
                       loc('../DeepMeerkat/DeepMeerkat/Video.py'): {'attrib-'\
        'starts': [('Video',
                    13),
                   ('Video.cluster_bounding_boxes',
                    252)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 259L,
        'sel-line-start': 9596L,
        'selection_end': 9655L,
        'selection_start': 9651L,
        'zoom': 0L},
                       loc('../DeepMeerkat/StartCloudDataFlow.sh'): {'attrib'\
        '-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 10L,
        'sel-line-start': 226L,
        'selection_end': 253L,
        'selection_start': 253L,
        'zoom': 0L},
                       loc('../DeepMeerkat/run_clouddataflow.py'): {'attrib-'\
        'starts': [('PredictDoFn',
                    9),
                   ('PredictDoFn.process',
                    14)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 542L,
        'selection_end': 563L,
        'selection_start': 563L,
        'zoom': 0L},
                       loc('../DeepMeerkat/training/Classification/Training.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 16L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 835L,
        'selection_end': 847L,
        'selection_start': 847L,
        'zoom': 0L},
                       loc('../DeepMeerkat/training/Classification/sample_photos.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 5L,
        'folded-linenos': [],
        'sel-line': 23L,
        'sel-line-start': 664L,
        'selection_end': 737L,
        'selection_start': 737L,
        'zoom': 0L},
                       loc('../DeepMeerkat/training/Classification/trainer/model.py'): {'a'\
        'ttrib-starts': [('Model',
                          100),
                         ('Model.build_inception_graph',
                          142)],
        'first-line': 136L,
        'folded-linenos': [],
        'sel-line': 149L,
        'sel-line-start': 5316L,
        'selection_end': 5348L,
        'selection_start': 5348L,
        'zoom': 0L},
                       loc('../ExploringDeepMeerkat/Appendix1.md'): {'attrib'\
        '-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../WhalePhys/Cloud/Startup.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 9L,
        'sel-line-start': 249L,
        'selection_end': 249L,
        'selection_start': 249L,
        'zoom': 0L},
                       loc('../dask-jobqueue/dask_jobqueue/core.py'): {'attr'\
        'ib-starts': [('JobQueueCluster',
                       16),
                      ('JobQueueCluster.adapt',
                       130)],
        'first-line': 120L,
        'folded-linenos': [],
        'sel-line': 131L,
        'sel-line-start': 3878L,
        'selection_end': 3883L,
        'selection_start': 3883L,
        'zoom': 0L},
                       loc('../dask-jobqueue/dask_jobqueue/slurm.py'): {'att'\
        'rib-starts': [('SLURMCluster',
                        15),
                       ('SLURMCluster.__init__',
                        32)],
        'first-line': 13L,
        'folded-linenos': [],
        'sel-line': 53L,
        'sel-line-start': 1406L,
        'selection_end': 1434L,
        'selection_start': 1434L,
        'zoom': 0L},
                       loc('../dask-jobqueue/dask_jobqueue/test_slurm.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../dask-jobqueue/test_slurm.py'): {'attrib-start'\
        's': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 187L,
        'selection_end': 187L,
        'selection_start': 187L,
        'zoom': 0L},
                       loc('DeepTrap/BackgroundSubtraction.py'): {'attrib-st'\
        'arts': [('BackgroundModel',
                  22),
                 ('BackgroundModel.__init__',
                  24)],
        'first-line': 23L,
        'folded-linenos': [],
        'sel-line': 31L,
        'sel-line-start': 874L,
        'selection_end': 898L,
        'selection_start': 898L,
        'zoom': 0L},
                       loc('DeepTrap/Generator.py'): {'attrib-starts': [('Ge'\
        'nerator',
        13),
        ('Generator.plot_image',
         137)],
        'first-line': 128L,
        'folded-linenos': [],
        'sel-line': 137L,
        'sel-line-start': 4145L,
        'selection_end': 4328L,
        'selection_start': 4145L,
        'zoom': 0L},
                       loc('DeepTrap/Geometry.py'): {'attrib-starts': [],
        'first-line': 117L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepTrap/H5Generator.py'): {'attrib-starts': [('G'\
        'enerator',
        17),
        ('Generator.__init__',
         28)],
        'first-line': 51L,
        'folded-linenos': [],
        'sel-line': 56L,
        'sel-line-start': 1419L,
        'selection_end': 1419L,
        'selection_start': 1419L,
        'zoom': 0L},
                       loc('DeepTrap/Locations.py'): {'attrib-starts': [('pr'\
        'eprocess_location',
        40)],
        'first-line': 40L,
        'folded-linenos': [],
        'sel-line': 45L,
        'sel-line-start': 1343L,
        'selection_end': 1409L,
        'selection_start': 1409L,
        'zoom': 0L},
                       loc('DeepTrap/__init__.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepTrap/callback.py'): {'attrib-starts': [('Eva'\
        'luate',
        8),
        ('Evaluate.on_epoch_end',
         20)],
        'first-line': 60L,
        'folded-linenos': [],
        'sel-line': 71L,
        'sel-line-start': 3079L,
        'selection_end': 3108L,
        'selection_start': 3108L,
        'zoom': 0L},
                       loc('DeepTrap/create_h5.py'): {'attrib-starts': [('wr'\
        'ite_records',
        43)],
        'first-line': 31L,
        'folded-linenos': [],
        'sel-line': 43L,
        'sel-line-start': 1413L,
        'selection_end': 1492L,
        'selection_start': 1492L,
        'zoom': 0L},
                       loc('DeepTrap/create_tfrecords.py'): {'attrib-starts': [('_'\
        'bytes_feature',
        9)],
        'first-line': 2L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 351L,
        'selection_end': 371L,
        'selection_start': 371L,
        'zoom': 0L},
                       loc('DeepTrap/models/mobilenet.py'): {'attrib-starts': [('M'\
        'odel',
        13),
        ('Model.train',
         18)],
        'first-line': 2L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 671L,
        'selection_end': 708L,
        'selection_start': 693L,
        'zoom': 0L},
                       loc('DeepTrap/models/resnet.py'): {'attrib-starts': [('c'\
        'ategorical_focal_loss',
        88),
        ('categorical_focal_loss.categorical_focal_loss_fixed',
         107)],
        'first-line': 2L,
        'folded-linenos': [],
        'sel-line': 125L,
        'sel-line-start': 4572L,
        'selection_end': 4635L,
        'selection_start': 4635L,
        'zoom': 0L},
                       loc('DeepTrap/preprocess.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 49L,
        'selection_end': 49L,
        'selection_start': 49L,
        'zoom': 0L},
                       loc('DeepTrap/utils.py'): {'attrib-starts': [('sequen'\
        'ce_voting',
        112)],
        'first-line': 129L,
        'folded-linenos': [],
        'sel-line': 112L,
        'sel-line-start': 4224L,
        'selection_end': 4992L,
        'selection_start': 4224L,
        'zoom': 0L},
                       loc('DeepTrap/visualization.py'): {'attrib-starts': [('p'\
        'lot_images',
        9)],
        'first-line': 6L,
        'folded-linenos': [],
        'sel-line': 23L,
        'sel-line-start': 797L,
        'selection_end': 842L,
        'selection_start': 842L,
        'zoom': 0L},
                       loc('HPC/preprocess.sbatch'): {'attrib-starts': [],
        'first-line': 5L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 629L,
        'selection_end': 629L,
        'selection_start': 629L,
        'zoom': 0L},
                       loc('HPC/submit_training.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 2L,
        'sel-line-start': 89L,
        'selection_end': 99L,
        'selection_start': 99L,
        'zoom': 0L},
                       loc('__init__.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('config.yaml'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 13L,
        'sel-line-start': 431L,
        'selection_end': 439L,
        'selection_start': 439L,
        'zoom': 0L},
                       loc('dask_generate.py'): {'attrib-starts': [],
        'first-line': 144L,
        'folded-linenos': [],
        'sel-line': 152L,
        'sel-line-start': 4623L,
        'selection_end': 4623L,
        'selection_start': 4623L,
        'zoom': 0L},
                       loc('download_sample_data.py'): {'attrib-starts': [],
        'first-line': 1L,
        'folded-linenos': [],
        'sel-line': 10L,
        'sel-line-start': 204L,
        'selection_end': 284L,
        'selection_start': 204L,
        'zoom': 0L},
                       loc('tests/download_sample_location.py'): {'attrib-st'\
        'arts': [],
        'first-line': 2L,
        'folded-linenos': [],
        'sel-line': 11L,
        'sel-line-start': 224L,
        'selection_end': 270L,
        'selection_start': 270L,
        'zoom': 0L},
                       loc('tests/test_H5Generator.py'): {'attrib-starts': [],
        'first-line': 26L,
        'folded-linenos': [],
        'sel-line': 48L,
        'sel-line-start': 2077L,
        'selection_end': 2093L,
        'selection_start': 2093L,
        'zoom': 0L},
                       loc('tests/test_Locations.py'): {'attrib-starts': [],
        'first-line': 4L,
        'folded-linenos': [],
        'sel-line': 6L,
        'sel-line-start': 68L,
        'selection_end': 207L,
        'selection_start': 68L,
        'zoom': 0L},
                       loc('train.py'): {'attrib-starts': [],
        'first-line': 103L,
        'folded-linenos': [],
        'sel-line': 112L,
        'sel-line-start': 4323L,
        'selection_end': 4358L,
        'selection_start': 4358L,
        'zoom': 0L},
                       loc('untitled-6.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('viz_h5.py'): {'attrib-starts': [],
        'first-line': 3L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 172L,
        'selection_end': 172L,
        'selection_start': 172L,
        'zoom': 0L},
                       loc('../macrosystems/DeepForest/DeepForest/SubmitKeras.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 336L,
        'selection_end': 362L,
        'selection_start': 362L,
        'zoom': 0L},
                       loc('../macrosystems/DeepForest/DeepForest/SubmitRVis.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../macrosystems/DeepForest/RunJob.sh'): {'attrib'\
        '-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 18L,
        'sel-line-start': 330L,
        'selection_end': 330L,
        'selection_start': 330L,
        'zoom': 0L},
                       loc('../macrosystems/DeepForest/SubmitLidar.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 2L,
        'sel-line-start': 42L,
        'selection_end': 65L,
        'selection_start': 65L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepTrap/lib/python3.7/multiprocessing/spawn.py'): {'a'\
        'ttrib-starts': [('_check_not_importing_main',
                          120)],
        'first-line': 120L,
        'folded-linenos': [],
        'sel-line': 135L,
        'sel-line-start': 3763L,
        'selection_end': 3763L,
        'selection_start': 3763L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/h5py/h5f.cpython-37m-darwin.so'): {'a'\
        'ttrib-starts': [],
        'first-line': 85L,
        'folded-linenos': [],
        'sel-line': 104L,
        'sel-line-start': 16757L,
        'selection_end': 16783L,
        'selection_start': 16757L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/keras/utils/data_utils.py'): {'a'\
        'ttrib-starts': [('get_index',
                          386)],
        'first-line': 388L,
        'folded-linenos': [],
        'sel-line': 400L,
        'sel-line-start': 13745L,
        'selection_end': 13745L,
        'selection_start': 13745L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/core/computation/expressions.py'): {'a'\
        'ttrib-starts': [('set_numexpr_threads',
                          53)],
        'first-line': 52L,
        'folded-linenos': [],
        'sel-line': 56L,
        'sel-line-start': 1213L,
        'selection_end': 1256L,
        'selection_start': 1256L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          97),
                         ('NDFrame.__getattr__',
                          5052)],
        'first-line': 5057L,
        'folded-linenos': [],
        'sel-line': 5066L,
        'sel-line-start': 178974L,
        'selection_end': 178974L,
        'selection_start': 178974L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/core/internals/construction.py'): {'a'\
        'ttrib-starts': [('sanitize_index',
                          508)],
        'first-line': 506L,
        'folded-linenos': [],
        'sel-line': 515L,
        'sel-line-start': 17727L,
        'selection_end': 17746L,
        'selection_start': 17746L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepTrap/lib/python3.7/threading.py'): {'a'\
        'ttrib-starts': [('Thread',
                          738),
                         ('Thread._bootstrap',
                          870)],
        'first-line': 879L,
        'folded-linenos': [],
        'sel-line': 886L,
        'sel-line-start': 31295L,
        'selection_end': 31342L,
        'selection_start': 31342L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('custom',
                        [u'PYTHONPATH=""'])}
proj.pyexec = {None: ('custom',
                      u'/Users/ben/miniconda3/envs/DeepTrap/bin/python')}
proj.vcs-system-config = ('prefs',
                          {'bzr': {'versioncontrol.bzr.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.bzr.executable': u'bzr'},
                           'cvs': {'versioncontrol.cvs.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.cvs.executable': u'cvs',
                                   'versioncontrol.cvs.extra-global-args': '-'\
        'z3'},
                           'git': {'versioncontrol.git.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.git.executable': u'git',
                                   'versioncontrol.git.use-porcelain': True},
                           'hg': {'versioncontrol.hg.active': 'active-if-pro'\
        'ject-dir',
                                  'versioncontrol.hg.dont-find-unregistered': True,
                                  'versioncontrol.hg.executable': u'hg',
                                  'versioncontrol.hg.extra-global-args': '--'\
        'encoding=utf8'},
                           'perforce': {'versioncontrol.perforce.active': 'n'\
        'ot-active',
        'versioncontrol.perforce.dont-find-unregistered': True,
        'versioncontrol.perforce.executable': u'p4',
        'versioncontrol.perforce.extra-global-args': ''},
                           'svn': {'versioncontrol.svn.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.svn.executable': u'svn',
                                   'versioncontrol.svn.extra-global-args': '',
                                   'versioncontrol.svn.svnadmin-executable': u'svnadmin'}})
search.search-history = [u'plot',
                         u'apply',
                         u'mask3',
                         u'thresh',
                         u'255',
                         u'stretch',
                         u'path_to_h5',
                         u'location',
                         u'image_data',
                         u'day_or_night',
                         u'dest',
                         u'config',
                         u'run',
                         u'h5',
                         u'create_h5',
                         u'date',
                         u'write',
                         u'close',
                         u'cloe',
                         u'load_image']
testing.stored-results = (1,
                          [],
                          {})
