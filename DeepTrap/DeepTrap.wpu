#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.err-values = {loc('../train.py'): {}}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'XJhyfDuUfSFS1sBEXYhXqlW2zq'\
        'uzgXJC',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'tabs only',
                 'notebook_percent': 0.25,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': ()}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {loc('../../DeepLidar/train.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../DeepLidar/train.py'),
                      'args')]},
        loc('Generator.py'): {'expanded-nodes': [],
                              'selected-nodes': [],
                              'top-node': [('class def',
        loc('Generator.py'),
        'Generator')]},
        loc('callback.py'): {'expanded-nodes': [],
                             'selected-nodes': [],
                             'top-node': [('function def',
        loc('callback.py'),
        'create')]},
        loc('models/random.py'): {'expanded-nodes': [],
                                  'selected-nodes': [],
                                  'top-node': [('class def',
        loc('models/random.py'),
        'Model')]},
        loc('models/resnet.py'): {'expanded-nodes': [],
                                  'selected-nodes': [],
                                  'top-node': [('class def',
        loc('models/resnet.py'),
        'Model')]},
        loc('utils.py'): {'expanded-nodes': [],
                          'selected-nodes': [],
                          'top-node': [('generic attribute',
        loc('utils.py'),
        'classes')]},
        loc('visualization.py'): {'expanded-nodes': [],
                                  'selected-nodes': [],
                                  'top-node': [('function def',
        loc('visualization.py'),
        'draw_annotation')]},
        loc('../config.yaml'): {'expanded-nodes': [],
                                'selected-nodes': [],
                                'top-node': None},
        loc('../train.py'): {'expanded-nodes': [],
                             'selected-nodes': [],
                             'top-node': [('generic attribute',
        loc('../train.py'),
        'config')]},
        loc('../../../miniconda3/envs/DeepTrap/lib/python3.7/posixpath.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../miniconda3/envs/DeepTrap/lib/python3.7/posixpath.py'),
                      'abspath')]},
        loc('../../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/keras/legacy/interfaces.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/keras/legacy/interfaces.py'),
                      'add_weight_args_preprocessing')]},
        loc('../../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/core/generic.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/core/generic.py'),
                      'NDFrame')]},
        loc('../../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/core/groupby/groupby.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/core/groupby/groupby.py'),
                      'GroupBy')]},
        loc('../../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/core/groupby/grouper.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/core/groupby/grouper.py'),
                      'Grouper')]},
        loc('../../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/core/internals/construction.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/pandas/core/internals/construction.py'),
                      'arrays_to_mgr')]},
        loc('unknown:untitled-1.py'): {'expanded-nodes': [],
                                       'selected-nodes': [],
                                       'top-node': None}},
                                'browse_mode': u'Current Module',
                                'follow-selection': False,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': False,
        u'Imported': False,
        u'Modules': True}}),
                              ('snippets',
                               'tall',
                               0,
                               {'tree-states': {'__all__': [],
        u'c': [],
        u'django': [],
        u'html': [],
        u'py': []}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [3,
                          0],
        'notebook_display': 'normal',
        'notebook_percent': 0.5147247119078104,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': u'scheduler',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'image_dict',
                                       'fReverse': False,
                                       'fSearchText': u'categ',
                                       'fStartPos': 0,
                                       'fStyle': 'regex',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('testing',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (loc('visualization.py'),
        20L,
        20L),
                       'attrib-starts': [],
                       'first-line': 1394L,
                       'folded-linenos': [],
                       'history': {u'file:/Users/ben/Documents/iwildcam_comp/train.py': ['a'\
        '.index.values\n',
        'filename = self.training_dict[image_index]["file_path"]\n',
        'import numpy as mnp\n',
        'generator.plot_image(1)\n',
        'import numpy as np\n',
        'filename\n',
        'image\n',
        'generator = Generator(train_df, config)\n',
        'generator.plot_image(10)\n',
        'validation_generator.size()\n',
        'validation_generator.size\n',
        'validation_generator.data.shape\n',
        'validation_generator.data.shape[0]\n',
        'validation_generator.load_annotation(10)\n',
        'validation_generator.load_annotation(1)\n',
        'validation_generator.label_to_name(1)\n',
        'validation_generator.labels\n',
        'validation_generator.name_to_label\n',
        'validation_generator.name_to_label(1)\n',
        'validation_generator.name_to_label(2)\n',
        'classes\n',
        'visualization.plot_images(validation_generator, show=True)\n',
        'visualization.plot_images(validation_generator, predictions, n= 2)'\
        '\n',
        'self.training_dict\n',
        'self.data\n',
        'generator\n',
        'generator.data\n',
        'predictions is not None\n',
        'n\n',
        'test_df\n',
        'test_df.shape\n',
        'validation_generator = Generator(test_df, config)\n',
        'validation_generator\n',
        'validation_generator.data\n',
        'self.data.shape[0]\n',
        'self.data.shape[0] !== 0\n',
        '!self.data.shape[0] == 0\n',
        'self.data.shape[0] == !0\n',
        'self.data.shape[0] == 0\n',
        'self.data.shape[0] is 0\n',
        'self.data.shape[0] is not 0\n',
        'self.data.shape[0] != 0\n',
        'predictions\n',
        'visualization.plot_images(validation_generator, predictions=predict'\
        'ions, n= 2, annotations=False)\n',
        'plt.plot()\n',
        'visualization.plot_images(validation_generator, predictions=predict'\
        'ions, n= 2,annotations=False, show=True)\n',
        'predictions_label = [utils.classes[x] for x in predictions]\n',
        'visualization.plot_images(validation_generator, n= 2,annotations=Fa'\
        'lse, show=True)\n',
        'predictions_label\n',
        'predictions_label[0]\n',
        'predictions_label[1]\n',
        'visualization.plot_images(train_generator, n= 2,annotations=True, s'\
        'how=True)\n',
        'visualization.plot_images(validation_generator, predictions=predict'\
        'ions_label, n= 2,annotations=False, show=True)\n',
        'train_df\n',
        'train_df.columns\n',
        'train_df.location.unique\n',
        'train_df.location.groupby("location")\n',
        'train_df.groupby("location")\n',
        'train_df.groupby("location").sample\n',
        'train_df.groupby("location").sample()\n',
        'train_df.groupby("location").unique()\n',
        'train_df.location.unique()\n',
        'train_df.location.unique().sample\n',
        'train_df.location.dropduplicates()\n',
        'train_df.location.drop_duplicates()\n',
        'train_df.location.drop_duplicates().sample\n',
        'train_df.location.drop_duplicates().shape\n',
        'train_df.location.drop_duplicates().sample(frac=0.85).shape\n',
        '138/117\n',
        '117/138\n',
        'train_df.location.drop_duplicates().sample(frac=0.85)\n',
        'training_locations = train_df.location.drop_duplicates().sample(fra'\
        'c=0.85)',
        'train_df[train_df.locations.isin(training_locations)]\n',
        'training_locations = train_df.location.drop_duplicates().sample(fra'\
        'c=0.85)\n',
        'train_df[train_df.location.isin(training_locations)]\n',
        'training_locations = train_df.location.drop_duplicates().sample(fra'\
        'c=0.85)    \ntraining_split = train_df[train_df.location.isin(train'\
        'ing_locations)]\nevaluation_split  = train_df[~ train_df.location.i'\
        'sin(training_locations)]\n\n',
        'evaluation_split.shape\n',
        'training_split.shape\n',
        'unique_locations = train_df.location.drop_duplicates()\n',
        'training_locations = train_df.location.drop_duplicates().head(n=int'\
        '(unique_locations.shape[0]*0.85))\n',
        'training_locations\n',
        'training_split = train_df[train_df.location.isin(training_locations'\
        ')]\n',
        'evaluation_split  = train_df[~ train_df.location.isin(training_loca'\
        'tions)]\n',
        'self.data.shape\n',
        'self.image_dir\n',
        'evaluation_split\n',
        'visualization.plot_images(train_generator, n= 5,annotations=True, s'\
        'how=True)\n',
        'annotation==1\n',
        'which(annotation==1)\n',
        'np.where(annotation==1)[0]\n',
        'annotation[0]\n',
        'annotation\n',
        'list(np.where(annotation==1))\n',
        'np.where(annotation==1)\n',
        'np.argmax(annotation)\n',
        'history = self.model.fit_generator(\n    generator=train_generator,'\
        '\n    steps_per_epoch=train_generator.size()/self.config["batch_siz'\
        'e"],\n    epochs=config["epochs"],\n    verbose=1,\n    weights=sel'\
        'f.download_imagenet(),\n    shuffle=False,\n    callbacks=callbacks'\
        ',\n)\n\n',
        'history = self.model.fit_generator(\n    generator=train_generator,'\
        '\n    steps_per_epoch=train_generator.size()/self.config["batch_siz'\
        'e"],\n    epochs=self.config["epochs"],\n    verbose=1,\n    weight'\
        's=self.download_imagenet(),\n    shuffle=False,\n    callbacks=call'\
        'backs,\n)\n\n',
        'imagenet_weights\n',
        'self.model.load_weights(imagenet_weights, by_name=True, skip_mismat'\
        'ch=skip_mismatch)\n',
        'self.model.load_weights(imagenet_weights, by_name=True, skip_mismat'\
        'ch=True)\n']},
                       'launch-id': None,
                       'sel-line': 1409L,
                       'sel-line-start': 3057752L,
                       'selection_end': 3057752L,
                       'selection_start': 3057752L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 3249L,
                       'folded-linenos': [],
                       'history': {None: ['from PIL import Image\n',
        'import keras\n',
        '(training_x, training_y), (_, _) = keras.datasets.cifar10.load_data'\
        '()\n',
        'training_x\n',
        'training_x.shape\n',
        'training_y.shape\n',
        'training_y[0]\n',
        'training_y[3]\n',
        '(training_x, training_y), (_, _) = keras.datasets.cifar10.load_data'\
        '()',
        'training_y = keras.utils.np_utils.to_categorical(training_y)\n',
        'training_y\n']},
                       'launch-id': None,
                       'sel-line': 3267L,
                       'sel-line-start': 197532L,
                       'selection_end': 197532L,
                       'selection_start': 197532L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('Generator.py'),
        {'attrib-starts': [('Generator',
                            12),
                           ('Generator.plot_image',
                            115)],
         'first-line': 45L,
         'folded-linenos': [],
         'sel-line': 115L,
         'sel-line-start': 3426L,
         'selection_end': 3471L,
         'selection_start': 3471L,
         'zoom': 0L},
        1556049966.585374],
        [loc('../train.py'),
         {'attrib-starts': [],
          'first-line': 24L,
          'folded-linenos': [],
          'sel-line': 29L,
          'sel-line-start': 1207L,
          'selection_end': 1207L,
          'selection_start': 1207L,
          'zoom': 0L},
         1556049969.896187],
        [loc('visualization.py'),
         {'attrib-starts': [('plot_images',
                             7)],
          'first-line': 15L,
          'folded-linenos': [],
          'sel-line': 23L,
          'sel-line-start': 780L,
          'selection_end': 780L,
          'selection_start': 780L,
          'zoom': 0L},
         1556050070.345759],
        [loc('utils.py'),
         {'attrib-starts': [('split_training',
                             54)],
          'first-line': 47L,
          'folded-linenos': [],
          'sel-line': 59L,
          'sel-line-start': 2143L,
          'selection_end': 2147L,
          'selection_start': 2147L,
          'zoom': 0L},
         1556050071.60711],
        [loc('Generator.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 4L,
          'sel-line-start': 56L,
          'selection_end': 74L,
          'selection_start': 72L,
          'zoom': 0L},
         1556050076.682234],
        [loc('Generator.py'),
         {'attrib-starts': [('Generator',
                             12),
                            ('Generator.define_groups',
                             54)],
          'first-line': 47L,
          'folded-linenos': [],
          'sel-line': 57L,
          'sel-line-start': 1569L,
          'selection_end': 1589L,
          'selection_start': 1587L,
          'zoom': 0L},
         1556050077.860471],
        [loc('Generator.py'),
         {'attrib-starts': [('Generator',
                             12),
                            ('Generator.load_annotation',
                             93)],
          'first-line': 87L,
          'folded-linenos': [],
          'sel-line': 97L,
          'sel-line-start': 2771L,
          'selection_end': 2827L,
          'selection_start': 2822L,
          'zoom': 0L},
         1556050079.520913],
        [loc('Generator.py'),
         {'attrib-starts': [('Generator',
                             12),
                            ('Generator.load_annotation',
                             93)],
          'first-line': 91L,
          'folded-linenos': [],
          'sel-line': 98L,
          'sel-line-start': 2838L,
          'selection_end': 2846L,
          'selection_start': 2846L,
          'zoom': 0L},
         1556050116.710552],
        [loc('visualization.py'),
         {'attrib-starts': [('plot_images',
                             7)],
          'first-line': 15L,
          'folded-linenos': [],
          'sel-line': 25L,
          'sel-line-start': 898L,
          'selection_end': 954L,
          'selection_start': 954L,
          'zoom': 0L},
         1556050164.142199],
        [loc('../train.py'),
         {'attrib-starts': [],
          'first-line': 27L,
          'folded-linenos': [],
          'sel-line': 35L,
          'sel-line-start': 1372L,
          'selection_end': 1372L,
          'selection_start': 1372L,
          'zoom': 0L},
         1556050185.328061],
        [loc('models/resnet.py'),
         {'attrib-starts': [('Model',
                             5),
                            ('Model.download_imagenet',
                             17)],
          'first-line': 14L,
          'folded-linenos': [],
          'sel-line': 23L,
          'sel-line-start': 947L,
          'selection_end': 1034L,
          'selection_start': 1034L,
          'zoom': 0L},
         1556050317.512356],
        [loc('../train.py'),
         {'attrib-starts': [],
          'first-line': 36L,
          'folded-linenos': [],
          'sel-line': 32L,
          'sel-line-start': 1308L,
          'selection_end': 1337L,
          'selection_start': 1337L,
          'zoom': 0L},
         1556050343.684836],
        [loc('models/resnet.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 4L,
          'sel-line-start': 96L,
          'selection_end': 96L,
          'selection_start': 96L,
          'zoom': 0L},
         1556050385.562299],
        [loc('../../../miniconda3/envs/DeepTrap/lib/python3.7/site-packages/keras/legacy/interfaces.py'),
         {'attrib-starts': [('generate_legacy_interface',
                             12),
                            ('generate_legacy_interface.legacy_support',
                             25),
                            ('generate_legacy_interface.legacy_support.wrapp'\
                             'er',
                             27)],
          'first-line': 82L,
          'folded-linenos': [],
          'sel-line': 90L,
          'sel-line-start': 3953L,
          'selection_end': 3953L,
          'selection_start': 3953L,
          'zoom': 0L},
         1556050393.993708],
        [loc('../train.py'),
         {'attrib-starts': [],
          'first-line': 30L,
          'folded-linenos': [],
          'sel-line': 38L,
          'sel-line-start': 1417L,
          'selection_end': 1417L,
          'selection_start': 1417L,
          'zoom': 0L},
         1556050395.019933],
        [loc('models/resnet.py'),
         {'attrib-starts': [('Model',
                             8),
                            ('Model.__init__',
                             10)],
          'first-line': 12L,
          'folded-linenos': [],
          'sel-line': 22L,
          'sel-line-start': 647L,
          'selection_end': 660L,
          'selection_start': 660L,
          'zoom': 0L},
         1556050481.576057],
        [loc('../train.py'),
         {'attrib-starts': [],
          'first-line': 3L,
          'folded-linenos': [],
          'sel-line': 38L,
          'sel-line-start': 1417L,
          'selection_end': 1417L,
          'selection_start': 1417L,
          'zoom': 0L},
         1556050497.244765],
        [loc('models/resnet.py'),
         {'attrib-starts': [('Model',
                             8),
                            ('Model.__init__',
                             10)],
          'first-line': 12L,
          'folded-linenos': [],
          'sel-line': 19L,
          'sel-line-start': 555L,
          'selection_end': 563L,
          'selection_start': 563L,
          'zoom': 0L},
         1556050536.973338],
        [loc('../train.py'),
         {'attrib-starts': [],
          'first-line': 30L,
          'folded-linenos': [],
          'sel-line': 38L,
          'sel-line-start': 1417L,
          'selection_end': 1417L,
          'selection_start': 1417L,
          'zoom': 0L},
         1556050539.923808],
        [loc('models/resnet.py'),
         {'attrib-starts': [('Model',
                             8),
                            ('Model.__init__',
                             10)],
          'first-line': 48L,
          'folded-linenos': [],
          'sel-line': 19L,
          'sel-line-start': 555L,
          'selection_end': 563L,
          'selection_start': 563L,
          'zoom': 0L},
         1556050551.784757]],
        20),
        'current-loc': loc('../train.py'),
        'editor-state-list': [(loc('visualization.py'),
                               {'attrib-starts': [('plot_images',
        7)],
                                'first-line': 15L,
                                'folded-linenos': [],
                                'sel-line': 25L,
                                'sel-line-start': 898L,
                                'selection_end': 954L,
                                'selection_start': 954L,
                                'zoom': 0L}),
                              (loc('utils.py'),
                               {'attrib-starts': [('split_training',
        54)],
                                'first-line': 47L,
                                'folded-linenos': [],
                                'sel-line': 59L,
                                'sel-line-start': 2143L,
                                'selection_end': 2147L,
                                'selection_start': 2147L,
                                'zoom': 0L}),
                              (loc('callback.py'),
                               {'attrib-starts': [('Evaluate',
        3)],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 3L,
                                'sel-line-start': 25L,
                                'selection_end': 46L,
                                'selection_start': 46L,
                                'zoom': 0L}),
                              (loc('../train.py'),
                               {'attrib-starts': [],
                                'first-line': 30L,
                                'folded-linenos': [],
                                'sel-line': 38L,
                                'sel-line-start': 1417L,
                                'selection_end': 1417L,
                                'selection_start': 1417L,
                                'zoom': 0L}),
                              (loc('Generator.py'),
                               {'attrib-starts': [('Generator',
        12),
        ('Generator.load_annotation',
         93)],
                                'first-line': 91L,
                                'folded-linenos': [],
                                'sel-line': 98L,
                                'sel-line-start': 2838L,
                                'selection_end': 2846L,
                                'selection_start': 2846L,
                                'zoom': 0L}),
                              (loc('models/random.py'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 0L,
                                'sel-line-start': 0L,
                                'selection_end': 441L,
                                'selection_start': 0L,
                                'zoom': 0L}),
                              (loc('models/resnet.py'),
                               {'attrib-starts': [('Model',
        8),
        ('Model.__init__',
         10)],
                                'first-line': 48L,
                                'folded-linenos': [],
                                'sel-line': 19L,
                                'sel-line-start': 555L,
                                'selection_end': 563L,
                                'selection_start': 563L,
                                'zoom': 0L}),
                              (loc('../../DeepLidar/train.py'),
                               {'attrib-starts': [('create_callbacks',
        121)],
                                'first-line': 116L,
                                'folded-linenos': [],
                                'sel-line': 128L,
                                'sel-line-start': 4725L,
                                'selection_end': 4745L,
                                'selection_start': 4745L,
                                'zoom': 0L}),
                              (loc('../config.yaml'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 5L,
                                'sel-line-start': 227L,
                                'selection_end': 242L,
                                'selection_start': 242L,
                                'zoom': 0L})],
        'has-focus': True,
        'locked': False},
        [loc('visualization.py'),
         loc('utils.py'),
         loc('callback.py'),
         loc('../train.py'),
         loc('Generator.py'),
         loc('models/random.py'),
         loc('models/resnet.py'),
         loc('../../DeepLidar/train.py'),
         loc('../config.yaml')]),
                               'open_files': [u'callback.py',
        u'models/random.py',
        u'../config.yaml',
        u'../../DeepLidar/train.py',
        u'utils.py',
        u'Generator.py',
        u'visualization.py',
        u'models/resnet.py',
        u'../train.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.5},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (10,
                         23,
                         1365,
                         877)}]}
guimgr.recent-documents = [loc('../train.py'),
                           loc('models/resnet.py'),
                           loc('visualization.py'),
                           loc('Generator.py'),
                           loc('utils.py'),
                           loc('../../DeepLidar/train.py'),
                           loc('../config.yaml'),
                           loc('models/random.py'),
                           loc('callback.py')]
proj.pyexec = {None: ('custom',
                      u'/Users/ben/miniconda3/envs/DeepTrap/bin/python')}
search.replace-history = [u'image_dict',
                          u'data']
search.search-history = [u'categ',
                         u'np',
                         u'validation_generator',
                         u'validation ge',
                         u'fit',
                         u'check',
                         u'training_dict',
                         u'\\n',
                         u'train_df']
testing.stored-results = (1,
                          [],
                          {})
